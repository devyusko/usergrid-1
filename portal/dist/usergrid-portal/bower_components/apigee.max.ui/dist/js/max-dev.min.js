/*! apigee-max-ui@1.0.1 2014-03-24 */
 AppServices = AppServices || {};(function(exports, global) {
    global["true"] = exports;
    angular.module("appservices.max").run([ "$templateCache", function($templateCache) {
        "use strict";
        $templateCache.put("performance/ab-config.html", "<div>\n" + "\n" + '    <page-title icon="&#59146;" title="A/B Testing Configs"></page-title>\n' + "\n" + '    <div class="row-fluid" >\n' + "\n" + '        <div class="span12">\n' + '          <form class="form-horizontal configs">\n' + '          <div class="control-group">\n' + '            <slidecheckbox label="Enable A/B Testing" data="configData.abtestingOverrideEnabled"></slidecheckbox>\n' + "          </div>\n" + "\n" + '          <div class="control-group">\n' + '            <label class="control-label" for="inputApplyTo">Apply to </label>\n' + '            <div class="controls">\n' + '              <input type="text" id="inputApplyTo" class="input-mini" ng-model="configData.abtestingPercentage"> % of Devices\n' + "            </div>\n" + "          </div>\n" + "          \n" + "          \n" + '          <h2 class="title">Monitoring Configs</h2>\n' + "\n" + "\n" + '            <div class="control-group">\n' + '              <slidecheckbox label="Enable Log Capturing" data="configData.abtestingAppConfig.enableLogMonitoring"></slidecheckbox>\n' + "            </div>\n" + '            <div class="control-group">\n' + '              <label class="control-label">Log Capture Levels</label>\n' + '              <div class="controls">\n' + '                <select ng-model="abLogLevel" ng-options="l.label for l in logLevels" ng-change="updateLogLevel(abLogLevel,\'abtestingAppConfig\')"></select>\n' + "              </div>\n" + "            </div>\n" + '            <div class="control-group">\n' + '              <slidecheckbox label="Enable Network Monitoring" data="configData.abtestingAppConfig.networkMonitoringEnabled"></slidecheckbox>\n' + "            </div>\n" + '            <div class="control-group">\n' + '              <slidecheckbox label="Enable Device Data Capture" data="configData.abtestingAppConfig.sessionDataCaptureEnabled"></slidecheckbox>\n' + "            </div>\n" + '            <div class="control-group">\n' + "\n" + '              <slidecheckbox label="Read Location" data="configData.abtestingAppConfig.locationCaptureEnabled"></slidecheckbox>\n' + "\n" + '              <slidecheckbox label="Read IMEI" data="configData.abtestingAppConfig.imeicaptureEnabled"></slidecheckbox>\n' + "\n" + '              <slidecheckbox label="Read Device Model" data="configData.abtestingAppConfig.deviceModelCaptureEnabled"></slidecheckbox>\n' + "\n" + '              <slidecheckbox label="Read Network Carrier" data="configData.abtestingAppConfig.networkCarrierCaptureEnabled"></slidecheckbox>\n' + "\n" + '              <slidecheckbox label="Read Apigee Device ID" data="configData.abtestingAppConfig.deviceIdCaptureEnabled"></slidecheckbox>\n' + "\n" + "            </div>\n" + '            <div class="control-group">\n' + '              <label class="control-label" for="inputUploadInt">Data Upload Interval (in Seconds)</label>\n' + '              <div class="controls">\n' + '                <input type="text" id="inputUploadInt" ng-model="configData.abtestingAppConfig.agentUploadIntervalInSeconds">\n' + "              </div>\n" + "            </div>\n" + '            <div class="control-group">\n' + '              <label class="control-label" for="inputSampRate">Sampling Rate (in Percentage)</label>\n' + '              <div class="controls">\n' + '                <input type="text" id="inputSampRate" ng-model="configData.abtestingAppConfig.samplingRate">\n' + "              </div>\n" + "            </div>\n" + '            <div class="control-group">\n' + '              <slidecheckbox label="Upload When Roaming" data="configData.abtestingAppConfig.enableUploadWhenRoaming"></slidecheckbox>\n' + "            </div>\n" + '            <div class="control-group">\n' + '              <slidecheckbox label="Upload When Not on WIFI" data="configData.abtestingAppConfig.enableUploadWhenMobile"></slidecheckbox>\n' + "            </div>\n" + "\n" + '            <h2 class="title">Application Specific Configs</h2>\n' + '              <div class="row-fluid"  >\n' + '                  <div class="span3" style="margin-right: 12px;">Tag</div>\n' + '                  <div class="span3" style="margin-right: 15px;">Key</div>\n' + '                  <div class="span3">Value</div>\n' + "              </div>\n" + '            <div class="form-inline" ng-repeat="config in abConfigParameters">\n' + '              <input name="category" type="text" class="input-large" ng-model="config.tag" required>\n' + '              <input name="key" type="text" class="input-large" ng-model="config.paramKey"  required> =\n' + '              <input name="value" type="text" class="input-large" ng-model="config.paramValue" required>\n' + '              <span class="hide">{{config.index = ($index + 1)}}</span>\n' + '              <button class="btn" ng-click="addRemoveConfig(config,\'abConfigParameters\')" ng-show="abConfigParameters.length != ($index + 1)">-</button>\n' + '              <button class="btn" ng-click="addRemoveConfig(config,\'abConfigParameters\')" ng-show="abConfigParameters.length == ($index + 1)">+</button>\n' + "            </div>\n" + "            <hr/>\n" + '            <button type="submit" class="btn btn-primary " ng-click="saveData(\'abConfigParameters\')">Save Changes</button>\n' + "          </form>\n" + "\n" + "        </div>\n" + "\n" + "\n" + "      </div>\n" + "\n" + "\n" + "\n" + "\n" + "\n" + "</div>\n" + "\n" + "\n");
        $templateCache.put("performance/api-perf.html", "<demo-data></demo-data>\n" + '<page-title icon="&#128200;" title="API Performance"></page-title>\n' + "\n" + '<div class="page-filters">\n' + "  <span ng-include=\"'performance/includes/time-filters.html'\"></span>\n" + "</div>\n" + "\n" + '<div ng-init="apiPerfSetup()">\n' + '  <section class="row-fluid">\n' + "\n" + "  </section>\n" + "  <!-- errors and crashes total row -->\n" + '  <section class="row-fluid api-perf-charts">\n' + "\n" + '    <div class="span6">\n' + "\n" + '      <h2 class="title chart">Avg Response Time</h2>\n' + "\n" + '      <div ng-include="\'performance/includes/no-data.html\'" ng-if="!chartDataPresent"></div>\n' + "\n" + '      <div class="main-chart-holder" ng-if="chartDataPresent">\n' + '      <chart id="requestTime" class="anim-chart" ng-if="selectedChartCriteria.chartCriteriaId === 1"\n' + '             chartdata="perfCharts.requestTimes"\n' + '             type="line"\n' + "             xAxisLabel=\"return Highcharts.dateFormat('%a, %H:%M', this.value);\"\n" + '             xAxisStep="3"></chart>\n' + "\n" + '      <chart id="requestTimeBar" class="anim-chart" ng-if="selectedChartCriteria.chartCriteriaId > 1"\n' + '             chartdata="perfCharts.requestTimes"\n' + '             type="column" class="bar"></chart>\n' + "       </div>\n" + "    </div>\n" + "\n" + '    <div class="span6">\n' + "\n" + '      <h2 class="title chart">Total Requests</h2>\n' + "\n" + '      <div ng-include="\'performance/includes/no-data.html\'" ng-if="!chartDataPresent"></div>\n' + "\n" + '      <div class="main-chart-holder" ng-if="chartDataPresent">\n' + '      <chart id="requests" class="anim-chart" ng-if="selectedChartCriteria.chartCriteriaId === 1"\n' + '             chartdata="perfCharts.requests"\n' + '             type="line"\n' + "             xAxisLabel=\"return Highcharts.dateFormat('%a, %H:%M', this.value);\"\n" + '             xAxisStep="3"></chart>\n' + "\n" + '      <chart id="requestsBar" class="anim-chart" ng-if="selectedChartCriteria.chartCriteriaId > 1"\n' + '             chartdata="perfCharts.requests"\n' + '             type="column" class="bar"></chart>\n' + "      </div>\n" + "    </div>\n" + "\n" + "\n" + "\n" + "\n" + "\n" + "\n" + "  </section>\n" + "\n" + '  <section class="row-fluid">\n' + "\n" + '    <div class="span12 perf-summary-data">\n' + "\n" + '      <div class="span3">\n' + '        <infobox datasrc="perfCharts.summary.avgLatency"\n' + '                 currentcompare="perfCharts.summary.currentCompare"\n' + '                 title="Avg Response Time"\n' + '                 class="response-time"></infobox>\n' + "      </div>\n" + "\n" + '      <div class="span3">\n' + '        <infobox datasrc="perfCharts.summary.maxLatency"\n' + '                 currentcompare="perfCharts.summary.currentCompare"\n' + '                 title="Max Response Time"\n' + '                 class="request-time"></infobox>\n' + "      </div>\n" + "\n" + '      <div class="span3">\n' + '        <infobox datasrc="perfCharts.summary.totalRequests"\n' + '                 currentcompare="perfCharts.summary.currentCompare"\n' + '                 title="Network Requests"\n' + '                 class="requests"></infobox>\n' + "      </div>\n" + "\n" + '      <div class="span3">\n' + '        <infobox datasrc="perfCharts.summary.totalErrors"\n' + '                 currentcompare="perfCharts.summary.currentCompare"\n' + '                 title="Network Errors"\n' + '                 class="errors"></infobox>\n' + "      </div>\n" + "\n" + "\n" + "    </div>\n" + "\n" + "  </section>\n" + "\n" + '  <balloon direction="south" ng-if="!chartDataPresent && logDataPresent">\n' + "    Scroll down to see log data sent by your SDK.\n" + "  </balloon>\n" + "\n" + '  <section class="row-fluid">\n' + '    <div class="span12 pareto-charts">\n' + "\n" + '      <div class="row-fluid log-search" ng-controller="RawLogCtrl">\n' + "\n" + '        <div class="span12">\n' + '          <h2 class="title">Network API Search</h2>\n' + "          <form>\n" + '            <div class="input-append span8">\n' + '            <input type="text" placeholder="e.g. apigee.com..." ng-model="rawLogSearch.url"\n' + '                   class=" input-xxlarge" ng-change="loadMoreLogs()">\n' + '            <button type="button" class="btn" ng-click="rawLogSearchShowAdv=!rawLogSearchShowAdv">Advanced</button>\n' + "            </div>\n" + '            <div class="span4 text-right" ng-if="rawLogs.length === 100 || rawLogSearch.pageNumber > 0">\n' + "              {{rawLogSearch.pageNumber === 0 ? 1 : rawLogSearch.pageNumber * 100}} - {{rawLogSearch.pageNumber === 0 ? (1 * rawLogs.length) : (rawLogSearch.pageNumber + 1) * rawLogs.length}}\n" + '              <a class="btn btn-primary toolbar" ng-disabled="rawLogSearch.pageNumber === 0" ng-click="rawLogSearch.pageNumber > 0 ? prevPage() : \'\'"><i class="pictogram">&#59229;</i></a>\n' + '              <a class="btn btn-primary toolbar" ng-disabled="rawLogs.length !== 100" ng-click="rawLogs.length === 100 ? nextPage() : \'\'"><i class="pictogram">&#59230;</i></a>\n' + "            </div>\n" + "          </form>\n" + '          <form class="form-inline adv-rawlog-form" ng-show="rawLogSearchShowAdv">\n' + '            <br style="clear:both"/>\n' + '            <div class="input-prepend">\n' + '              <span class="add-on">Status Code:</span>\n' + '              <input class="input-small" type="text"  ng-model="rawLogSearch.httpStatusCode" ng-change="loadMoreLogs()">\n' + "            </div>\n" + '            <div class="input-prepend">\n' + '              <span class="add-on">Resp. Time > </span>\n' + '              <input class="input-small" type="text"  ng-model="rawLogSearch.latency" ng-change="loadMoreLogs()">\n' + "            </div>\n" + '            <div class="input-prepend">\n' + '              <span class="add-on">Network Type</span>\n' + '              <input class="input-small" type="text"  ng-model="rawLogSearch.networkType" ng-change="loadMoreLogs()">\n' + "            </div>\n" + '            <div class="input-prepend">\n' + '              <span class="add-on">Carrier</span>\n' + '              <input class="input-small" type="text"  ng-model="rawLogSearch.networkCarrier" ng-change="loadMoreLogs()">\n' + "            </div>\n" + '            <div class="input-prepend">\n' + '              <span class="add-on">Platform</span>\n' + '              <input class="input-small" type="text"  ng-model="rawLogSearch.devicePlatform" ng-change="loadMoreLogs()">\n' + "            </div>\n" + "            <button type=\"submit\" class=\"btn\" ng-click=\"rawLogSearch.httpStatusCode='';rawLogSearch.latency='';rawLogSearch.networkType='';rawLogSearch.networkCarrier='';rawLogSearch.devicePlatform='';loadMoreLogs()\">Clear All Advanced</button>\n" + "          </form>\n" + '          <table class="table table-striped table-bordered raw-log-table">\n' + "            <thead>\n" + "            <tr>\n" + "              <th>Time</th>\n" + "              <th>Message</th>\n" + "            </tr>\n" + "            </thead>\n" + "            <tbody>\n" + "            <tr ng-repeat=\"log in rawLogs | orderBy:'timeStamp':true | rawLogFilter:rawLogSearch:['url']:['latency']\">\n" + '              <td class="log-time-holder">\n' + "                <div>\n" + "                  <span class=\"{{rawLogs.rawDataType === 'logRawData' ? 'log-time1' : 'log-time2'}}\">{{log.timeStamp | date:'M-dd-yyyy HH:mm:ss'}}</span>\n" + "                  </div>\n" + "              </td>\n" + "              <td>\n" + "                <span>{{log.url}}</span>\n" + '                <div class="row-meta">\n' + '                  <span class="label">Status Code:</span>\n' + '                  <span class="value">{{log.httpStatusCode}}</span>\n' + '                  <span class="label">Response Time:</span>\n' + '                  <span class="value">{{log.latency}}</span>\n' + '                  <span class="label">Network Type:</span>\n' + '                  <span class="value">{{log.networkType}}</span>\n' + '                  <span class="label">Carrier:</span>\n' + '                  <span class="value">{{log.networkCarrier}}</span>\n' + '                  <span class="label">Platform:</span>\n' + '                  <span class="value">{{log.devicePlatform}}</span>\n' + "                </div>\n" + "              </td>\n" + "            </tr>\n" + "            </tbody>\n" + "          </table>\n" + '          <div class="row-fluid">\n' + '            <div class="input-append span8">\n' + "\n" + "\n" + "            </div>\n" + '            <div class="span4 text-right" ng-if="rawLogs.length === 100 || rawLogSearch.pageNumber > 0">\n' + "              {{rawLogSearch.pageNumber === 0 ? 1 : rawLogSearch.pageNumber * 100}} - {{rawLogSearch.pageNumber === 0 ? (1 * rawLogs.length) : (rawLogSearch.pageNumber + 1) * rawLogs.length}}\n" + '              <a class="btn btn-primary toolbar" ng-disabled="rawLogSearch.pageNumber === 0" ng-click="rawLogSearch.pageNumber > 0 ? prevPage() : \'\'"><i class="pictogram">&#59229;</i></a>\n' + '              <a class="btn btn-primary toolbar" ng-disabled="rawLogs.length !== 100" ng-click="rawLogs.length === 100 ? nextPage() : \'\'"><i class="pictogram">&#59230;</i></a>\n' + "            </div>\n" + "          </div>\n" + "        </div>\n" + "\n" + "      </div>\n" + "\n" + "    </div>\n" + "  </section>\n" + "\n" + "</div>\n" + "\n" + "\n");
        $templateCache.put("performance/app-overview.html", "<demo-data></demo-data>\n" + "\n" + "<div ng:include=\"'performance/includes/time-filters.html'\"></div>\n" + "\n" + '<div ng-controller="PerformanceCtrl" ng-init="appOverviewSetup()">\n' + "<!-- crash errors row -->\n" + '<section class="row-fluid errors-crashes">\n' + '    <div class="span6">\n' + "\n" + '        <ul class="span2 info-details unstyled">\n' + '            <li class="title">Top 5 Crash Causes</li>\n' + '            <li class="secondary">15 Total</li>\n' + '            <li class="tertiary">38 users affected</li>\n' + "        </ul>\n" + "\n" + '        <div class="span10 top-5-crash info-box">\n' + '            <div class="info-container">\n' + '                <table class="table">\n' + "                    <thead>\n" + "                    <tr>\n" + '                        <th class="graph-row">Cause</th>\n' + '                        <th class="count">Total</th>\n' + "                    </tr>\n" + "                    </thead>\n" + "                    <tbody>\n" + "                    <tr>\n" + '                        <td class="graph-row">\n' + '                            <div class="bar">message</div>\n' + "                        </td>\n" + '                        <td class="count">134</td>\n' + "                    </tr>\n" + "                    <tr>\n" + '                        <td class="graph-row">\n' + '                            <div class="bar">message</div>\n' + "                        </td>\n" + '                        <td class="count">134</td>\n' + "                    </tr>\n" + "                    <tr>\n" + '                        <td class="graph-row">\n' + '                            <div class="bar">message</div>\n' + "                        </td>\n" + '                        <td class="count">134</td>\n' + "                    </tr>\n" + "                    <tr>\n" + '                        <td class="graph-row">\n' + '                            <div class="bar">message</div>\n' + "                        </td>\n" + '                        <td class="count">134</td>\n' + "                    </tr>\n" + "                    <tr>\n" + '                        <td class="graph-row">\n' + '                            <div class="bar">message</div>\n' + "                        </td>\n" + '                        <td class="count">134</td>\n' + "                    </tr>\n" + "                    </tbody>\n" + "                </table>\n" + "            </div>\n" + "        </div>\n" + "\n" + "    </div>\n" + "\n" + '    <div class="span6">\n' + "\n" + '        <ul class="span2 info-details unstyled">\n' + '            <li class="title">Top 5 Errors</li>\n' + '            <li class="secondary">120 Total</li>\n' + '            <li class="tertiary">200 users affected</li>\n' + "        </ul>\n" + "\n" + '        <div class="span10 top-5-crash info-box">\n' + '            <div class="info-container">\n' + '                <table class="table">\n' + "                    <thead>\n" + "                    <tr>\n" + '                        <th class="graph-row">Cause</th>\n' + '                        <th class="count">Total</th>\n' + "                    </tr>\n" + "                    </thead>\n" + "                    <tbody>\n" + "                    <tr>\n" + '                        <td class="graph-row">\n' + '                            <div class="bar">message</div>\n' + "                        </td>\n" + '                        <td class="count">134</td>\n' + "                    </tr>\n" + "                    <tr>\n" + '                        <td class="graph-row">\n' + '                            <div class="bar">message</div>\n' + "                        </td>\n" + '                        <td class="count">134</td>\n' + "                    </tr>\n" + "                    <tr>\n" + '                        <td class="graph-row">\n' + '                            <div class="bar">message</div>\n' + "                        </td>\n" + '                        <td class="count">134</td>\n' + "                    </tr>\n" + "                    <tr>\n" + '                        <td class="graph-row">\n' + '                            <div class="bar">message</div>\n' + "                        </td>\n" + '                        <td class="count">134</td>\n' + "                    </tr>\n" + "                    <tr>\n" + '                        <td class="graph-row">\n' + '                            <div class="bar">message</div>\n' + "                        </td>\n" + '                        <td class="count">134</td>\n' + "                    </tr>\n" + "                    </tbody>\n" + "                </table>\n" + "            </div>\n" + "        </div>\n" + "\n" + "    </div>\n" + "</section>\n" + "\n" + "<!-- api row -->\n" + '<section class="row-fluid api-issues">\n' + '    <div class="span6">\n' + "\n" + '        <ul class="span2 info-details unstyled">\n' + '            <li class="title">Slow APIs</li>\n' + '            <li class="secondary">Above 2000ms</li>\n' + "        </ul>\n" + "\n" + '        <div class="span10 slow-apis info-box">\n' + '            <div class="info-container">\n' + '                <table class="table">\n' + "                    <thead>\n" + "                    <tr>\n" + '                        <th class="normal-row">URL</th>\n' + '                        <th class="count">Response Time</th>\n' + "                    </tr>\n" + "                    </thead>\n" + "                    <tbody>\n" + "                    <tr>\n" + '                        <td class="normal-row">message</td>\n' + '                        <td class="count">134</td>\n' + "                    </tr>\n" + "                    <tr>\n" + '                        <td class="normal-row">message</td>\n' + '                        <td class="count">134</td>\n' + "                    </tr>\n" + "                    <tr>\n" + '                        <td class="normal-row">message</td>\n' + '                        <td class="count">134</td>\n' + "                    </tr>\n" + "                    <tr>\n" + '                        <td class="normal-row">message</td>\n' + '                        <td class="count">134</td>\n' + "                    </tr>\n" + "                    <tr>\n" + '                        <td class="normal-row">message</td>\n' + '                        <td class="count">134</td>\n' + "                    </tr>\n" + "                    </tbody>\n" + "                </table>\n" + "            </div>\n" + "        </div>\n" + "\n" + "    </div>\n" + "\n" + '    <div class="span6">\n' + "\n" + '        <ul class="span2 info-details unstyled">\n' + '            <li class="title">API Errors</li>\n' + '            <li class="secondary">Abnormal Status Codes</li>\n' + "        </ul>\n" + "\n" + '        <div class="span10 api-errors info-box">\n' + '            <div class="info-container">\n' + '                <table class="table">\n' + "                    <thead>\n" + "                    <tr>\n" + '                        <th class="normal-row">URL</th>\n' + '                        <th class="count">Status Code</th>\n' + "                    </tr>\n" + "                    </thead>\n" + "                    <tbody>\n" + "                    <tr>\n" + '                        <td class="normal-row">message</td>\n' + '                        <td class="count">134</td>\n' + "                    </tr>\n" + "                    <tr>\n" + '                        <td class="normal-row">message</td>\n' + '                        <td class="count">134</td>\n' + "                    </tr>\n" + "                    <tr>\n" + '                        <td class="normal-row">message</td>\n' + '                        <td class="count">134</td>\n' + "                    </tr>\n" + "                    <tr>\n" + '                        <td class="normal-row">message</td>\n' + '                        <td class="count">134</td>\n' + "                    </tr>\n" + "                    <tr>\n" + '                        <td class="normal-row">message</td>\n' + '                        <td class="count">134</td>\n' + "                    </tr>\n" + "                    </tbody>\n" + "                </table>\n" + "            </div>\n" + "        </div>\n" + "\n" + "    </div>\n" + "</section>\n" + "\n" + "\n" + "<!-- app usage row -->\n" + '<section class="row-fluid api-issues">\n' + '    <div class="span6">\n' + "\n" + '        <ul class="span2 info-details unstyled">\n' + '            <li class="title">App Usage</li>\n' + '            <li class="secondary">By Version</li>\n' + "        </ul>\n" + "\n" + '        <div class="span10 app-usage-content">\n' + '            <chart id="appVersions" value=\'{{appOverviewCharts.appVersions}}\' type="pie"\n' + '                   style="max-width: 50%;height:250px"></chart>\n' + '            <table class="table">\n' + "                <thead>\n" + "                <tr>\n" + "                    <th>App Version</th>\n" + "                </tr>\n" + "                </thead>\n" + "                <tbody>\n" + "                <tr>\n" + '                    <td class="graph-row">\n' + '                        <div class="bar"></div>\n' + "                        1.0.0\n" + "                    </td>\n" + '                    <td class="count">12%</td>\n' + "                </tr>\n" + "                <tr>\n" + '                    <td class="graph-row">\n' + '                        <div class="bar"></div>\n' + "                        1.1.1\n" + "                    </td>\n" + '                    <td class="count">22%</td>\n' + "                </tr>\n" + "                <tr>\n" + '                    <td class="graph-row">\n' + '                        <div class="bar"></div>\n' + "                        1.2.0\n" + "                    </td>\n" + '                    <td class="count">63%</td>\n' + "                </tr>\n" + "                </tbody>\n" + "            </table>\n" + "        </div>\n" + "\n" + "    </div>\n" + "\n" + '    <div class="span6">\n' + "\n" + '        <ul class="span2 info-details unstyled">\n' + '            <li class="title">App Usage</li>\n' + '            <li class="secondary">By Platform</li>\n' + "        </ul>\n" + "\n" + '        <div class="span10 app-usage-content">\n' + '            <chart id="platformVersions" value=\'{{appOverviewCharts.platformVersions}}\' type="pie"\n' + '                   style="max-width: 50%;height:250px"></chart>\n' + '            <table class="table">\n' + "                <thead>\n" + "                <tr>\n" + "                    <th>Platform</th>\n" + "                </tr>\n" + "                </thead>\n" + "                <tbody>\n" + "                <tr>\n" + '                    <td class="graph-row">\n' + '                        <div class="bar"></div>\n' + "                        Firefox OS\n" + "                    </td>\n" + '                    <td class="count">12%</td>\n' + "                </tr>\n" + "                <tr>\n" + '                    <td class="graph-row">\n' + '                        <div class="bar"></div>\n' + "                        Android\n" + "                    </td>\n" + '                    <td class="count">22%</td>\n' + "                </tr>\n" + "                <tr>\n" + '                    <td class="graph-row">\n' + '                        <div class="bar"></div>\n' + "                        iOS\n" + "                    </td>\n" + '                    <td class="count">63%</td>\n' + "                </tr>\n" + "                </tbody>\n" + "            </table>\n" + "        </div>\n" + "\n" + "    </div>\n" + "</section>\n" + "\n" + "<!-- trouble makers row -->\n" + '<section class="row-fluid trouble-makers">\n' + '    <div class="span12">\n' + "\n" + '        <ul class="span2 info-details fixed unstyled">\n' + '            <li class="title">Trouble Makers</li>\n' + '            <li class="secondary">Problematic Devices, Networks, and OSs</li>\n' + "        </ul>\n" + "\n" + '        <div class="span10">\n' + '            <div class="row-fluid">\n' + '                <div class="span12">\n' + "\n" + '                    <section class="span4">\n' + "                        <h5>Problematic Devices</h5>\n" + '                        <table class="table">\n' + "                            <tbody>\n" + "                            <tr>\n" + '                                <td class="tablet-icon">HTC One</td>\n' + '                                <td class="phone-icon">Nexus One</td>\n' + "                            </tr>\n" + "                            <tr>\n" + '                                <td class="phone-icon">HTC Evo</td>\n' + '                                <td class="tablet-icon">Galaxy Tab</td>\n' + "                            </tr>\n" + "                            </tbody>\n" + "                        </table>\n" + "\n" + "                    </section>\n" + "\n" + '                    <section class="span4">\n' + "                        <h5>Slowest Carriers</h5>\n" + '                        <ol class="asc-light slow-carriers grow">\n' + "                            <li>Verizon</li>\n" + "                            <li>Sprint</li>\n" + "                            <li>TMobile</li>\n" + "                            <li>AT&amp;T</li>\n" + "                        </ol>\n" + "                    </section>\n" + "\n" + '                    <section class="span4">\n' + "                        <h5>Problematic OS Versions</h5>\n" + '                        <ol class="asc-light prob-os">\n' + "                            <li>Android 2.3</li>\n" + "                            <li>Android 2.3</li>\n" + "                            <li>Android 2.3</li>\n" + "                            <li>Android 2.3</li>\n" + "                        </ol>\n" + "                    </section>\n" + "                </div>\n" + "            </div>\n" + "        </div>\n" + "\n" + "    </div>\n" + "</section>\n" + "\n" + "<!-- sessions sparklines row -->\n" + '<section class="row-fluid trouble-makers">\n' + '    <div class="span12">\n' + "\n" + '        <ul class="span2 info-details fixed unstyled">\n' + '            <li class="title">Sessions</li>\n' + '            <li class="secondary">Over Past Hour</li>\n' + "        </ul>\n" + "\n" + '        <div class="span10">\n' + '            <span class="span12 sessions-bar"></span>\n' + "        </div>\n" + "\n" + "    </div>\n" + "</section>\n" + "\n" + "</div>\n" + "\n" + "\n");
        $templateCache.put("performance/app-usage.html", "<demo-data></demo-data>\n" + '<page-title icon="&#128202;" title="App Usage"></page-title>\n' + "\n" + '<div class="page-filters">\n' + "  <span ng-include=\"'performance/includes/time-filters.html'\"></span>\n" + "</div>\n" + "\n" + "\n" + "\n" + '<div ng-init="appUsageSetup()">\n' + "\n" + "\n" + "  <!-- errors and crashes total row -->\n" + '  <section class="row-fluid api-perf-charts">\n' + "\n" + '    <div class="span12">\n' + '      <h2 class="title chart">Active Sessions Count {{selectedChartCriteria.chartName}}</h2>\n' + '      <!--step: <input ng-model="apptest.step" width="5" style="width: 20px" />-->\n' + "\n" + '      <div ng-include="\'performance/includes/no-data.html\'" ng-if="chartDataWaiting || !chartDataPresent"></div>\n' + "\n" + '      <div class="main-chart-holder" ng-if="chartDataPresent">\n' + '      <chart id="sessionTotals" class="anim-chart" ng-if="selectedChartCriteria.chartName === \'Overview\'"\n' + '             chartdata="appUsageCharts.totals"\n' + '             type="line"\n' + "             xAxisLabel=\"return Highcharts.dateFormat('%a, %H:%M', this.value);\"\n" + '             xAxisStep="3"></chart>\n' + "\n" + '      <chart id="sessionTotalsBar" class="anim-chart" ng-if="selectedChartCriteria.chartName !== \'Overview\'"\n' + '             chartdata="appUsageCharts.totals"\n' + '             type="column"></chart>\n' + "      </div>\n" + '      <div class="row-fluid app-summary-data">\n' + '        <div class="span4">\n' + '          <infobox datasrc="appUsageCharts.summary.totalSessions"\n' + '                   currentcompare="appUsageCharts.summary.currentCompare"\n' + '                   title="Total Sessions"\n' + '                   class="usage"></infobox>\n' + "        </div>\n" + "\n" + '        <div class="span4">\n' + '          <infobox datasrc="appUsageCharts.summary.maxConcurrentSessions"\n' + '                   currentcompare="appUsageCharts.summary.currentCompare"\n' + '                   title="Max Concurrent Sessions"\n' + '                   class="usage"></infobox>\n' + "        </div>\n" + "\n" + '        <div class="span4">\n' + '          <infobox datasrc="appUsageCharts.summary.totalUniqueUsers"\n' + '                   currentcompare="appUsageCharts.summary.currentCompare"\n' + '                   title="Total Unique Users"\n' + '                   class="usage"></infobox>\n' + "        </div>\n" + "      </div>\n" + "\n" + "    </div>\n" + "\n" + "\n" + "  </section>\n" + "\n" + '  <section class="row-fluid api-issues" ng-if="selectedChartCriteria.chartName === \'Overview\'">\n' + '    <div class="span6">\n' + "\n" + '      <ul class="span12 info-details unstyled">\n' + '        <li class="title pie-label">App Version</li>\n' + "      </ul>\n" + '      <div class="span12 app-usage-content">\n' + '        <chart id="appVersion" class="anim-chart"\n' + '               chartdata="appUsageCharts.appVersion.chart"\n' + '               type="pie" style="max-width:60%;margin:0 0 0 -5%;height:300px"\n' + '               titleicon="&#128202;"\n' + '               titleiconclass="apichart"\n' + '               titlecolor="rgba(27,112,160,0.4)"\n' + '               titleimagetop="-6%"\n' + '               titleimageleft="-5%"></chart>\n' + '        <table class="table">\n' + "          <thead>\n" + "          <tr>\n" + "            <th>App Version</th>\n" + "          </tr>\n" + "          </thead>\n" + "          <tbody>\n" + '          <tr ng-repeat="app in appUsageCharts.appVersion.data.chartData">\n' + '            <td class="graph-row" >\n' + '              <div class="bar"></div>\n' + "              {{app.attribute}}\n" + "            </td>\n" + '            <td class="count">{{app.percentage | number:0}}%</td>\n' + "          </tr>\n" + "          </tbody>\n" + "        </table>\n" + "      </div>\n" + "\n" + "    </div>\n" + "\n" + '    <div class="span6">\n' + "\n" + '      <ul class="span12 info-details unstyled">\n' + '        <li class="title pie-label">Device Platform</li>\n' + "      </ul>\n" + "\n" + '      <div class="span12 app-usage-content">\n' + '        <chart id="devicePlatform" class="anim-chart"\n' + '               chartdata="appUsageCharts.devicePlatform.chart"\n' + '               type="pie" style="max-width:60%;margin:0 0 0 -5%;height:300px"\n' + '               titleicon="&#128202;"\n' + '               titleiconclass="apichart"\n' + '               titlecolor="rgba(27,112,160,0.4)"\n' + '               titleimagetop="-6%"\n' + '               titleimageleft="-5%"></chart>\n' + '        <table class="table">\n' + "          <thead>\n" + "          <tr>\n" + "            <th>Platform</th>\n" + "          </tr>\n" + "          </thead>\n" + "          <tbody>\n" + "\n" + '          <tr ng-repeat="app in appUsageCharts.devicePlatform.data.chartData">\n' + '            <td class="graph-row" >\n' + '              <div class="bar"></div>\n' + "              {{app.attribute}}\n" + "            </td>\n" + '            <td class="count">{{app.percentage | number:0}}%</td>\n' + "          </tr>\n" + "          </tbody>\n" + "        </table>\n" + "      </div>\n" + "\n" + "    </div>\n" + "  </section>\n" + "\n" + "\n" + '  <section class="row-fluid" ng-if="selectedChartCriteria.chartName === \'Overview\'">\n' + '    <div class="span6 pareto-charts">\n' + '          <h2 class="title">Sessions by Device Model</h2>\n' + "\n" + '          <chart id="sessionsByModel" class="anim-chart"\n' + '                 chartdata="appUsageCharts.sessionsByModel"\n' + '                 type="column"\n' + '                 height="300"></chart>\n' + "    </div>\n" + "\n" + '    <div class="span6 pareto-charts">\n' + '      <h2 class="title">Sessions by OS Versions</h2>\n' + "\n" + '      <chart id="sessionsByModel" class="anim-chart"\n' + '             chartdata="appUsageCharts.sessionsByPlatform"\n' + '             type="column"\n' + '             height="300"></chart>\n' + "    </div>\n" + "  </section>\n" + "\n" + "\n" + "\n" + "\n" + "\n" + "</div>\n" + "\n" + "\n");
        $templateCache.put("performance/beta-config.html", "<div>\n" + '    <page-title icon="&#59190;" title="Beta Testing Configs"></page-title>\n' + "\n" + "\n" + '      <div class="row-fluid" >\n' + "\n" + '        <div class="span12">\n' + "\n" + '          <form class="form-horizontal configs">\n' + '            <div class="control-group">\n' + '              <slidecheckbox label="Enable Device Level Override" data="configData.deviceLevelOverrideEnabled"></slidecheckbox>\n' + "            </div>\n" + "\n" + '            <div class="control-group">\n' + '              <label class="control-label">Matching Apigee Device Ids (one Id per line):</label>\n' + '              <div class="controls">\n' + "                  <textarea ng-model=\"deviceIdFilters\" ng-blur=\"updateFilter(deviceIdFilters,'deviceIdFilters','DEVICE_ID')\"></textarea>\n" + "              </div>\n" + "            </div>\n" + "\n" + '            <div class="control-group">\n' + '              <label class="control-label">Matching Telephone Numbers (Android Only):</label>\n' + '              <div class="controls">\n' + "                  <textarea ng-model=\"deviceNumberFilters\" ng-blur=\"updateFilter(deviceNumberFilters,'deviceNumberFilters','DEVICE_NUMBER')\"></textarea>\n" + "              </div>\n" + "            </div>\n" + "\n" + '            <h2 class="title">Monitoring Configs</h2>\n' + "\n" + '            <div class="control-group">\n' + '              <slidecheckbox label="Enable Log Capturing" data="configData.deviceLevelAppConfig.enableLogMonitoring"></slidecheckbox>\n' + "            </div>\n" + '            <div class="control-group">\n' + '              <label class="control-label">Log Capture Levels</label>\n' + '              <div class="controls">\n' + '                <select ng-model="betaLogLevel" ng-options="l.label for l in logLevels" ng-change="updateLogLevel(betaLogLevel,\'deviceLevelAppConfig\')"></select>\n' + "              </div>\n" + "            </div>\n" + '            <div class="control-group">\n' + '              <slidecheckbox label="Enable Network Monitoring" data="configData.deviceLevelAppConfig.networkMonitoringEnabled"></slidecheckbox>\n' + "            </div>\n" + '            <div class="control-group">\n' + '              <slidecheckbox label="Enable Device Data Capture" data="configData.deviceLevelAppConfig.deviceIdCaptureEnabled"></slidecheckbox>\n' + "            </div>\n" + '            <div class="control-group">\n' + "\n" + '              <slidecheckbox label="Read Location" data="configData.deviceLevelAppConfig.locationCaptureEnabled"></slidecheckbox>\n' + "\n" + '              <slidecheckbox label="Read IMEI" data="configData.deviceLevelAppConfig.imeicaptureEnabled"></slidecheckbox>\n' + "\n" + '              <slidecheckbox label="Read Device Model" data="configData.deviceLevelAppConfig.deviceModelCaptureEnabled"></slidecheckbox>\n' + "\n" + '              <slidecheckbox label="Read Network Carrier" data="configData.deviceLevelAppConfig.networkCarrierCaptureEnabled"></slidecheckbox>\n' + "\n" + '              <slidecheckbox label="Read Apigee Device ID" data="configData.deviceLevelAppConfig.deviceIdCaptureEnabled"></slidecheckbox>\n' + "\n" + "            </div>\n" + '            <div class="control-group">\n' + '              <label class="control-label" for="inputUploadInt">Data Upload Interval (in Seconds)</label>\n' + '              <div class="controls">\n' + '                <input type="text" id="inputUploadInt" ng-model="configData.deviceLevelAppConfig.agentUploadIntervalInSeconds">\n' + "              </div>\n" + "            </div>\n" + '            <div class="control-group">\n' + '              <label class="control-label" for="inputSampRate">Sampling Rate (in Percentage)</label>\n' + '              <div class="controls">\n' + '                <input type="text" id="inputSampRate" ng-model="configData.deviceLevelAppConfig.samplingRate">\n' + "              </div>\n" + "            </div>\n" + '            <div class="control-group">\n' + '              <slidecheckbox label="Upload When Roaming" data="configData.deviceLevelAppConfig.enableUploadWhenRoaming"></slidecheckbox>\n' + "            </div>\n" + '            <div class="control-group">\n' + '              <slidecheckbox label="Upload When Not on WIFI" data="configData.deviceLevelAppConfig.enableUploadWhenMobile"></slidecheckbox>\n' + "            </div>\n" + "\n" + '            <h2 class="title">Application Specific Configs</h2>\n' + '              <div class="row-fluid"  >\n' + '                  <div class="span3" style="margin-right: 12px;">Tag</div>\n' + '                  <div class="span3" style="margin-right: 15px;">Key</div>\n' + '                  <div class="span3">Value</div>\n' + "              </div>\n" + '            <div class="form-inline" ng-repeat="config in deviceLevelConfigParameters">\n' + '              <input name="category" type="text" class="input-large" ng-model="config.tag" required>\n' + '              <input name="key" type="text" class="input-large" ng-model="config.paramKey"  required> =\n' + '              <input name="value" type="text" class="input-large" ng-model="config.paramValue" required>\n' + '              <span class="hide">{{config.index = ($index + 1)}}</span>\n' + '              <button class="btn" ng-click="addRemoveConfig(config,\'deviceLevelConfigParameters\')" ng-show="deviceLevelConfigParameters.length != ($index + 1)">-</button>\n' + '              <button class="btn" ng-click="addRemoveConfig(config,\'deviceLevelConfigParameters\')" ng-show="deviceLevelConfigParameters.length == ($index + 1)">+</button>\n' + "            </div>\n" + "            <hr/>\n" + '            <button type="submit" class="btn btn-primary " ng-click="saveData(\'deviceLevelConfigParameters\')">Save Changes</button>\n' + "\n" + "          </form>\n" + "\n" + "        </div>\n" + "\n" + "\n" + "      </div>\n" + "\n" + "    </div>\n" + "\n" + "\n" + "\n" + "</div>\n" + "\n" + "\n");
        $templateCache.put("performance/checkbox-template.html", "<div>\n" + '<label class="control-label">{{label}}</label>\n' + '<div class="controls">\n' + '  <div class="toggle-form">\n' + '    <input type="checkbox" class="check" ng-model="data"><b class="b switch"></b>\n' + '    <b class="b track"></b></div>\n' + "</div>\n" + "</div>");
        $templateCache.put("performance/configure.html", "<div>\n" + "\n" + '<section class="row-fluid">\n' + "\n" + '  <div class="span12">\n' + "\n" + '    <h2 class="chart-title">{{configData.appName}}</h2>\n' + "\n" + '    <div class="row-fluid" >\n' + "\n" + '      <div class="span6">\n' + "\n" + '        <form class="form-horizontal">\n' + '          <div class="control-group">\n' + '            <label class="control-label" for="inputAppId">App ID</label>\n' + '            <div class="controls">\n' + '              <input type="text" id="inputAppId" ng-model="configData.instaOpsApplicationId">\n' + "            </div>\n" + "          </div>\n" + '          <div class="control-group">\n' + '            <div class="controls">\n' + '              <label class="checkbox">\n' + '                <input type="checkbox" ng-model="configData.monitoringDisabled"> monitoringDisabled\n' + "              </label>\n" + '              <button type="submit" class="btn">Sign in</button>\n' + "            </div>\n" + "          </div>\n" + "        </form>\n" + "\n" + "      </div>\n" + "\n" + "\n" + "    </div>\n" + "\n" + "  </div>\n" + "\n" + "</section>\n" + "\n" + "</div>\n" + "\n" + "\n");
        $templateCache.put("performance/custom-events.html", '<h1 class="title"><i class="pictogram title">&#9716;</i> Custom Events</h1>\n' + "\n" + "<div ng:include=\"'performance/includes/time-filters.html'\"></div>");
        $templateCache.put("performance/default-config.html", "<div>\n" + '    <page-title icon="&#128214;" title="Default Configs"></page-title>\n' + "\n" + "\n" + '    <div class="row-fluid" >\n' + '      <div class="span12">\n' + '        <h2 class="title">Monitoring Configs</h2>\n' + '        <form class="form-horizontal configs">\n' + '          <div class="control-group">\n' + '            <slidecheckbox label="Enable Log Capturing" data="configData.defaultAppConfig.enableLogMonitoring"></slidecheckbox>\n' + "          </div>\n" + '          <div class="control-group">\n' + '            <label class="control-label">Log Capture Levels</label>\n' + '            <div class="controls">\n' + '              <select ng-model="appConfigLogLevel" ng-options="l.label for l in logLevels" ng-change="updateLogLevel(appConfigLogLevel,\'defaultAppConfig\')"></select>\n' + "            </div>\n" + "          </div>\n" + '          <div class="control-group">\n' + '            <slidecheckbox label="Enable Network Monitoring" data="configData.defaultAppConfig.networkMonitoringEnabled"></slidecheckbox>\n' + "          </div>\n" + '          <div class="control-group">\n' + '            <slidecheckbox label="Enable Device Data Capture" data="configData.defaultAppConfig.sessionDataCaptureEnabled"></slidecheckbox>\n' + "          </div>\n" + '          <div class="control-group">\n' + "\n" + '            <slidecheckbox label="Read Location" data="configData.defaultAppConfig.locationCaptureEnabled"></slidecheckbox>\n' + "\n" + '            <slidecheckbox label="Read IMEI" data="configData.defaultAppConfig.imeicaptureEnabled"></slidecheckbox>\n' + "\n" + '            <slidecheckbox label="Read Device Model" data="configData.defaultAppConfig.deviceModelCaptureEnabled"></slidecheckbox>\n' + "\n" + '            <slidecheckbox label="Read Network Carrier" data="configData.defaultAppConfig.networkCarrierCaptureEnabled"></slidecheckbox>\n' + "\n" + '            <slidecheckbox label="Read Apigee Device ID" data="configData.defaultAppConfig.deviceIdCaptureEnabled"></slidecheckbox>\n' + "\n" + "          </div>\n" + '          <div class="control-group">\n' + '            <label class="control-label" for="inputUploadInt">Data Upload Interval (in Seconds)</label>\n' + '            <div class="controls">\n' + '              <input type="text" id="inputUploadInt" ng-model="configData.defaultAppConfig.agentUploadIntervalInSeconds">\n' + "            </div>\n" + "          </div>\n" + '          <div class="control-group">\n' + '            <label class="control-label" for="inputSampRate">Sampling Rate (in Percentage)</label>\n' + '            <div class="controls">\n' + '              <input type="text" id="inputSampRate" ng-model="configData.defaultAppConfig.samplingRate">\n' + "            </div>\n" + "          </div>\n" + '          <div class="control-group">\n' + '            <slidecheckbox label="Upload When Roaming" data="configData.defaultAppConfig.enableUploadWhenRoaming"></slidecheckbox>\n' + "          </div>\n" + '          <div class="control-group">\n' + '            <slidecheckbox label=" Upload When Not on WIFI" data="configData.defaultAppConfig.enableUploadWhenMobile"></slidecheckbox>\n' + "          </div>\n" + "\n" + '            <h2 class="title">Application Specific Configs</h2>\n' + "\n" + '            <div class="row-fluid"  >\n' + '               <div class="span3" style="margin-right: 12px;">Tag</div>\n' + '                <div class="span3" style="margin-right: 15px;">Key</div>\n' + '                <div class="span3">Value</div>\n' + "            </div>\n" + '            <div class="form-inline " ng-repeat="config in defaultAppConfigParameters">\n' + '                    <input name="category" type="text" class="input-large" ng-model="config.tag" required>\n' + '                    <input name="key" type="text" class="input-large" ng-model="config.paramKey" required> =\n' + '                    <input name="value" type="text" class="input-large" ng-model="config.paramValue" required>\n' + '                    <span class="hide">{{config.index = ($index + 1)}}</span>\n' + '                    <button class="btn" ng-click="addRemoveConfig(config,\'defaultAppConfigParameters\')"\n' + '                            ng-show="defaultAppConfigParameters.length != ($index + 1)">-\n' + "                    </button>\n" + '                    <button class="btn" ng-click="addRemoveConfig(config,\'defaultAppConfigParameters\')"\n' + '                            ng-show="defaultAppConfigParameters.length == ($index + 1)">+\n' + "                    </button>\n" + "            </div>\n" + "          <hr/>\n" + '          <button type="submit" class="btn btn-primary " ng-click="saveData(\'defaultAppConfigParameters\')">Save Changes</button>\n' + "        </form>\n" + "\n" + "      </div>\n" + "\n" + "\n" + "    </div>\n" + "\n" + "  </div>\n" + "\n" + "\n" + "\n" + "</div>\n" + "\n" + "\n");
        $templateCache.put("performance/demo-data.html", '<div id="demo-data-ctrl" ng-if="dataVals.showDemoBar" ng-cloak class="demo-holder">\n' + '  <div class="alert alert-demo alert-animate">\n' + '    <div class="toggle">\n' + '      <input type="checkbox" class="check" ng-model="dataVals.demoData">\n' + '      <b class="b switch"></b>\n' + '      <b class="b track"></b>\n' + "    </div>\n" + "\n" + '    <div class="demo-text">\n' + "      <i class=\"pictogram\">{{dataVals.demoData ? '&#128165;' : '&#59141;'}}</i>You are currently viewing <span class=\"bold\">{{dataVals.demoData ? 'demo data' : 'live data for your ' + currentApp + ' app'}}</span>.\n" + "    </div>\n" + "\n" + "    <div class=\"demo-holder-content\">DEMO MODE {{dataVals.demoData ? 'ON' : 'OFF'}}</div>\n" + "  </div>\n" + "</div>");
        $templateCache.put("performance/errors-crashes.html", "<demo-data></demo-data>\n" + '<div ng-init="errorsCrashesSetup()">\n' + '<page-title icon="&#9889;" title="Errors &amp; Crashes"></page-title>\n' + "\n" + '<div class="page-filters">\n' + "  <span ng-include=\"'performance/includes/time-filters.html'\"></span>\n" + "</div>\n" + "\n" + "\n" + "\n" + "<!-- errors and crashes total row -->\n" + '<div id="popupHolder"></div>\n' + '<div id="pointPopupTemp">\n' + '<div id="pointPopup" class="hide" style="position:absolute" ng-mousedown="popup.startMoving(event);" ng-mouseup="popup.stopMoving();">\n' + '  <h3><i class="pictogram sub">&#9889;</i><span></span></h3><a class="pull-right" ng-click="hidePopup($event)">Close</a>\n' + '  <div class="content">\n' + "\n" + "  </div>\n" + '  <div class="footer">\n' + "    <a ng-click=\"scrollTo('logs')\">View all logs</a>\n" + "  </div>\n" + "</div>\n" + "</div>\n" + "\n" + '<section class="row-fluid">\n' + "\n" + "\n" + "\n" + "</section>\n" + '<section class="row-fluid">\n' + "\n" + "<div ng-class=\"ecDetailedView.value == 1 ? 'span8' : 'span12'\">\n" + "\n" + '  <h2 class="title with-icons">{{selectedChartCriteria.chartName}} <div class="pull-right">\n' + '    <a ng-if="selectedChartCriteria.chartName === \'Overview\'" ng-click="convertChartType(\'convertLineChart\')"><i class="pictogram">&#128200;</i>line</a>\n' + '    <a ng-if="selectedChartCriteria.chartName === \'Overview\'" ng-click="convertChartType(\'convertAreaChart\')"><i class="pictogram">&#128318;</i>area</a></div></h2>\n' + "\n" + '  <div ng-include="\'performance/includes/no-data.html\'" ng-if="!chartDataPresent"></div>\n' + "\n" + '  <div class="main-chart-holder" ng-if="chartDataPresent">\n' + "\n" + '  <chart id="ecTotals" class="anim-chart"\n' + '         chartdata="ecCharts.totals"\n' + '         type="column"></chart>\n' + "  </div>\n" + "  <!--errors and crashes only (combined view)-->\n" + '  <div class="row-fluid summary-data errors-crashes" ng-show="ecDetailedView.value === 1">\n' + "\n" + '    <div class="span6">\n' + '      <infobox datasrc="ecCharts.summary.totalAppErrors"\n' + '               currentcompare="ecCharts.summary.currentCompare"\n' + '               title="Total App Errors"\n' + '               class="errors"></infobox>\n' + "    </div>\n" + "\n" + '    <div class="span6">\n' + '      <infobox datasrc="ecCharts.summary.totalCrashes"\n' + '               currentcompare="ecCharts.summary.currentCompare"\n' + '               title="Total Crashes"\n' + '               class="crashes"></infobox>\n' + "    </div>\n" + "\n" + "  </div>\n" + "\n" + "  <!--errors only-->\n" + '  <div class="row-fluid summary-data errors" ng-if="ecDetailedView.value === 2">\n' + "\n" + '    <div class="span4">\n' + '      <infobox datasrc="ecCharts.summary.totalCriticalErrors"\n' + '               currentcompare="ecCharts.summary.currentCompare"\n' + '               title="Total Critical"\n' + '               class="critical"></infobox>\n' + "    </div>\n" + "\n" + '    <div class="span4">\n' + '      <infobox datasrc="ecCharts.summary.totalErrors"\n' + '               currentcompare="ecCharts.summary.currentCompare"\n' + '               title="Total Errors"\n' + '               class="errors"></infobox>\n' + "    </div>\n" + "\n" + '    <div class="span4">\n' + '      <infobox datasrc="ecCharts.summary.totalWarnings"\n' + '               currentcompare="ecCharts.summary.currentCompare"\n' + '               title="Total Warnings"\n' + '               class="warnings"></infobox>\n' + "    </div>\n" + "  </div>\n" + "\n" + "  <!--crashes only-->\n" + '  <div class="row-fluid summary-data crashes" ng-if="ecDetailedView.value === 3">\n' + "\n" + "\n" + "\n" + '    <div class="span12">\n' + '      <infobox datasrc="ecCharts.summary.totalCrashes"\n' + '               currentcompare="ecCharts.summary.currentCompare"\n' + '               title="Total Crashes"\n' + '               class="crashes"></infobox>\n' + "    </div>\n" + "\n" + "\n" + "  </div>\n" + "\n" + "</div>\n" + "\n" + '<div class="span4 crash-summary" ng-if="ecDetailedView.value === 1">\n' + '  <h2 class="title">Crash Summary (Top 5)</h2>\n' + "\n" + '  <div class="row-fluid" style="text-align:center">\n' + "\n" + "\n" + '      <ul class="crashes-pie span12 info-details unstyled">\n' + '        <li class="small">App Version</li>\n' + "\n" + "\n" + '      <li style="width:250px;margin:10px auto 0 auto;">\n' + '        <chart id="appVersion"\n' + '               class="anim-chart"\n' + '               chartdata="ecCharts.appVersion.chart"\n' + '               type="pie" style="height:260px"\n' + '               titleicon="&#9889;"\n' + '               titleiconclass="chart"\n' + '               titlecolor="rgba(255,3,3,0.5)"\n' + '               titleimagetop="-6%"\n' + '               titleimageleft="-2%"></chart>\n' + "      </li>\n" + "\n" + "      </ul>\n" + "\n" + '      <ul class="crashes-pie span12 info-details unstyled">\n' + '        <li class="small">Platforms</li>\n' + "\n" + "\n" + '      <li style="width:250px;margin:10px auto 0 auto;">\n' + '        <chart id="appVersion"\n' + '               class="anim-chart"\n' + '               chartdata="ecCharts.devicePlatform.chart"\n' + '               type="pie" style="height:260px"\n' + '               titleicon="&#9889;"\n' + '               titleiconclass="chart"\n' + '               titlecolor="rgba(255,3,3,0.5)"\n' + '               titleimagetop="-6%"\n' + '               titleimageleft="-2%"></chart>\n' + "      </li>\n" + "      </ul>\n" + "\n" + "  </div>\n" + "</div>\n" + "\n" + "</section>\n" + '<section class="row-fluid" ng-if="ecDetailedView.value === 1">\n' + '  <div class="span12 pareto-charts">\n' + "\n" + '    <div ng-class="row-fluid">\n' + "\n" + '      <div id="deviceModelCrashes1" ng-if="rawLogs.rawDataType === \'logRawData\'" class="span6">\n' + '        <h2 class="title">Crashes by Device Models</h2>\n' + "\n" + '        <chart id="deviceModels1"\n' + '               class="anim-chart"\n' + '               chartdata="ecCharts.deviceModels"\n' + '               type="column"\n' + '                height="300"></chart>\n' + "\n" + "      </div>\n" + "\n" + "\n" + '      <div ng-if="rawLogs.rawDataType === \'logRawData\'" class="span6">\n' + '        <h2 class="title">Crashes by OS Versions</h2>\n' + "\n" + '        <chart id="platformVersions"\n' + '               class="anim-chart"\n' + '               chartdata="ecCharts.platformVersions"\n' + '               type="column"\n' + '               height="300"></chart>\n' + "      </div>\n" + "\n" + "    </div>\n" + "\n" + "  </div>\n" + "</section>\n" + "\n" + '<balloon direction="south" ng-if="!chartDataPresent && logDataPresent">\n' + "  Scroll down to see log data sent by your SDK.\n" + "</balloon>\n" + "\n" + '<section class="row-fluid">\n' + '  <div class="span12">\n' + "\n" + "    <!--http://blogs.lessthandot.com/index.php/WebDev/UIDevelopment/AJAX/angularjs-and-ng-grid-->\n" + '    <a name="logs"></a>\n' + '    <div class="row-fluid log-search" ng-controller="RawLogCtrl">\n' + '      <div class="span12">\n' + '        <h2 ng-show="rawLogs.rawDataType === \'logRawData\'" class="title">Raw Log Search</h2>\n' + "\n" + '        <h2 ng-hide="rawLogs.rawDataType === \'logRawData\'" class="title">Crash Log Search</h2>\n' + "\n" + '        <form ng-switch="rawLogs.rawDataType">\n' + "\n" + '          <div class="input-append span8">\n' + "\n" + '            <input ng-show="rawLogs.rawDataType === \'logRawData\'" type="text" placeholder="log search..."\n' + '                   ng-model="rawLogSearch.logMessage" class="input-xxlarge" ng-change="loadMoreLogs()">\n' + '            <input ng-hide="rawLogs.rawDataType === \'logRawData\'" type="text" placeholder="crash log search..."\n' + '                   ng-model="rawLogSearch.crashSummary" class="input-xxlarge" ng-change="loadMoreLogs()">\n' + '            <button type="button" class="btn" ng-click="rawLogSearchShowAdv=!rawLogSearchShowAdv">{{rawLogSearchShowAdv ? \'Hide\' : \'Show\'}} Advanced</button>\n' + "\n" + "          </div>\n" + '          <div class="span4 text-right" ng-if="rawLogs.rawData.length === 100 || rawLogSearch.pageNumber > 0">\n' + "            {{rawLogSearch.pageNumber === 0 ? 1 : rawLogSearch.pageNumber * 100}} - {{rawLogSearch.pageNumber === 0 ? (1 * rawLogs.rawData.length) : (rawLogSearch.pageNumber + 1) * rawLogs.rawData.length}}\n" + '            <a class="btn btn-primary toolbar" ng-disabled="rawLogSearch.pageNumber === 0" ng-click="rawLogSearch.pageNumber > 0 ? prevPage() : \'\'"><i class="pictogram">&#59229;</i></a>\n' + '            <a class="btn btn-primary toolbar" ng-disabled="rawLogs.rawData.length !== 100" ng-click="rawLogs.rawData.length === 100 ? nextPage() : \'\'"><i class="pictogram">&#59230;</i></a>\n' + "          </div>\n" + "        </form>\n" + '        <form class="form-inline adv-rawlog-form" ng-show="rawLogSearchShowAdv">\n' + '          <br style="clear:both"/>\n' + '          <div class="input-prepend">\n' + '            <span class="add-on">Tag</span>\n' + '            <input class="input-small" type="text" ng-model="rawLogSearch.tag"\n' + '                   ng-attr-placeholder="{{rawLogs.rawData[0].tag}}..." ng-change="loadMoreLogs()">\n' + "          </div>\n" + '          <div class="input-prepend" ng-show="rawLogs.rawDataType === \'logRawData\'">\n' + '            <span class="add-on">Log Level</span>\n' + '            <input class="input-mini" type="text" ng-model="rawLogSearch.logLevel"\n' + '                   ng-attr-placeholder="{{rawLogs.rawData[0].logLevel}}..." ng-change="loadMoreLogs()">\n' + "          </div>\n" + '          <div class="input-prepend">\n' + '            <span class="add-on">Device Model</span>\n' + '            <input class="input-small" type="text" ng-model="rawLogSearch.deviceModel"\n' + '                   ng-attr-placeholder="{{rawLogs.rawData[0].deviceModel}}..." ng-change="loadMoreLogs()">\n' + "          </div>\n" + '          <div class="input-prepend">\n' + '            <span class="add-on">Platform</span>\n' + '            <input class="input-small" type="text" ng-model="rawLogSearch.devicePlatform"\n' + '                   ng-attr-placeholder="{{rawLogs.rawData[0].devicePlatform}}..." ng-change="loadMoreLogs()">\n' + "          </div>\n" + '          <div class="input-prepend">\n' + '            <span class="add-on">OS Version</span>\n' + '            <input class="input-small" type="text" ng-model="rawLogSearch.deviceOperatingSystem"\n' + '                   ng-attr-placeholder="{{rawLogs.rawData[0].deviceOperatingSystem}}..." ng-change="loadMoreLogs()">\n' + "          </div>\n" + '          <div class="input-prepend">\n' + '            <span class="add-on">Device ID</span>\n' + '            <input class="input-small" type="text" ng-model="rawLogSearch.deviceId"\n' + '                   ng-attr-placeholder="{{rawLogs.rawData[0].deviceId}}..." ng-change="loadMoreLogs()">\n' + "          </div>\n" + '          <button type="submit" class="btn"\n' + "                  ng-click=\"rawLogSearch.tag='';rawLogSearch.deviceModel='';rawLogSearch.devicePlatform='';rawLogSearch.deviceOperatingSystem='';rawLogSearch.deviceId='';loadMoreLogs()\">\n" + "            Clear All Advanced\n" + "          </button>\n" + "        </form>\n" + '        <table class="table table-striped table-bordered raw-log-table">\n' + "          <thead>\n" + "          <tr>\n" + '            <th class="log-time-header"><div class="raw-data-text">Time</div></th>\n' + '            <th class="message-header"><div class="raw-data-text">Message</div>\n' + "\n" + "\n" + "            </th>\n" + "          </tr>\n" + "          </thead>\n" + "          <tbody>\n" + "          <tr  ng-repeat=\"log in rawLogs.rawData | orderBy:'timeStamp':true  | rawLogFilter:rawLogSearch:['logMessage','crashSummary']\">\n" + '            <td class="log-time-holder">\n' + "              <div>\n" + "              <span ng-class=\"rawLogs.rawDataType === 'logRawData' ? 'log-time1' : 'log-time2'\">{{log.timeStamp | date:'M-dd-yyyy HH:mm:ss'}}</span>\n" + '            <span ng-if="rawLogs.rawDataType === \'logRawData\'" class="log-level {{log.logLevel}}">\n' + "                {{log.logLevel === 'D' ? 'Debug' : ''}}\n" + "                {{log.logLevel === 'A' ? 'Assert' : ''}}\n" + "                {{log.logLevel === 'I' ? 'Info' : ''}}\n" + "                {{log.logLevel === 'W' ? 'Warn' : ''}}\n" + "                {{log.logLevel === 'E' ? 'Error' : ''}}\n" + "\n" + "              </span>\n" + "              </div>\n" + "            </td>\n" + "            <td >\n" + "              <span ng-if=\"rawLogs.rawDataType === 'logRawData'\">{{log.logMessage}}</span>\n" + "              <span ng-if=\"rawLogs.rawDataType !== 'logRawData'\">{{log.crashSummary ? log.crashSummary : 'No crash summary available'}}</span>\n" + "\n" + '              <div class="row-meta">\n' + "                <span ng-show=\"rawLogs.rawDataType === 'logRawData'\">\n" + '                  <span class="label">Tag:</span>\n' + '                  <span class="value">{{log.tag}}</span>\n' + '                  <span class="label">Network Type:</span>\n' + '                  <span class="value">{{log.networkType}}</span>\n' + '                  <span class="label">Carrier:</span>\n' + '                  <span class="value">{{log.networkCarrier}}</span>\n' + "                </span>\n" + '                <span class="label">Device ID:</span>\n' + '                <span class="value">{{log.deviceId}}</span>\n' + '                <span class="label">Platform:</span>\n' + '                <span class="value">{{log.devicePlatform}}</span>\n' + '                <span class="label">OS:</span>\n' + '                <span class="value">{{log.deviceOperatingSystem}}</span>\n' + '                <span class="label">Device Model:</span>\n' + '                <span class="value">{{log.deviceModel}}</span>\n' + '                <span class="value" ng-hide="rawLogs.rawDataType === \'logRawData\'"><a ng-href="{{log.crashLogUrl}}">Download Crash Log</a></span>\n' + "              </div>\n" + "            </td>\n" + "          </tr>\n" + "          </tbody>\n" + "        </table>\n" + '        <div class="row-fluid">\n' + '          <div class="input-append span8">\n' + "\n" + "\n" + "          </div>\n" + '          <div class="span4 text-right" ng-if="rawLogs.rawData.length === 100 || rawLogSearch.pageNumber > 0">\n' + "            {{rawLogSearch.pageNumber === 0 ? 1 : rawLogSearch.pageNumber * 100}} - {{rawLogSearch.pageNumber === 0 ? (1 * rawLogs.rawData.length) : (rawLogSearch.pageNumber + 1) * rawLogs.rawData.length}}\n" + '            <a class="btn btn-primary toolbar" ng-disabled="rawLogSearch.pageNumber === 0" ng-click="rawLogSearch.pageNumber > 0 ? prevPage() : \'\'"><i class="pictogram">&#59229;</i></a>\n' + '            <a class="btn btn-primary toolbar" ng-disabled="rawLogs.rawData.length !== 100" ng-click="rawLogs.rawData.length === 100 ? nextPage() : \'\'"><i class="pictogram">&#59230;</i></a>\n' + "          </div>\n" + "        </div>\n" + "      </div>\n" + "\n" + "    </div>\n" + "  </div>\n" + "</section>\n" + "\n" + "</div>\n" + "\n" + "\n");
        $templateCache.put("performance/errors-crashes/crashes.html", "");
        $templateCache.put("performance/errors-crashes/errors.html", "");
        $templateCache.put("performance/event-config.html", "<div>\n" + "\n" + '  <section class="row-fluid">\n' + "\n" + '    <div class="span12">\n' + "\n" + '      <h1 class="title"><i class="pictogram title">&#8646;</i> Event Configs</h1>\n' + "\n" + '      <div class="row-fluid" >\n' + "\n" + '        <div class="span12">\n' + '          <h2 class="title"></h2>\n' + '          <form class="form-horizontal">\n' + "\n" + "          </form>\n" + "\n" + "        </div>\n" + "\n" + "\n" + "      </div>\n" + "\n" + "    </div>\n" + "\n" + "  </section>\n" + "\n" + "</div>\n" + "\n" + "\n");
        $templateCache.put("performance/includes/info-box.html", '<ul class="info-details unstyled">\n' + '  <li class="title small">{{title}}</li>\n' + '  <li class="top-5-crash info-box">\n' + '    <div class="summary-container {{datasrc.color}}">\n' + "      {{datasrc.label}}\n" + '      <div class="compare-data" ng-show="currentcompare != \'NOW\'">\n' + "        <span ng-class=\"currentcompare\">({{currentcompare == 'YESTERDAY' && 'Yesterday' || 'Last Week'}}) {{datasrc.value}}</span>\n" + "      </div>\n" + "    </div>\n" + "  </li>\n" + "</ul>");
        $templateCache.put("performance/includes/no-data.html", '<div class="main-chart-holder no-data">\n' + '  <bsmodal id="needHelp"\n' + '           title="Need Help?"\n' + '           close="hideModal"\n' + '           closelabel="Cancel"\n' + '           extrabutton="needHelpDialog"\n' + '           extrabuttonlabel="Get Help"\n' + "           ng-cloak>\n" + "    <p>Do you want to contact support? Support will get in touch with you as soon as possible.</p>\n" + "  </bsmodal>\n" + '  <div class="no-data-msg" >\n' + '    <div class="waiting" ng-if="chartDataWaiting">\n' + '      <div class="bars" id="bar1"></div>\n' + '      <div class="bars" id="bar2"></div>\n' + '      <div class="bars" id="bar3"></div>\n' + "    </div>\n" + '    <div ng-if="!chartDataPresent && !chartDataWaiting && !logDataPresent">\n' + '    <div class="content">\n' + "      No data detected for this time range.\n" + "    </div>\n" + '    <button ng-click="showModal(\'needHelp\')" ng-if="performance.showHelpButton" class="btn glow">I have installed the SDK and need help!</button>\n' + '    <div class="content" style="margin: 10px 0 10px 0" ng-if="performance.showHelpButton">\n' + "      or\n" + "    </div>\n" + '    <button ng-click="toggleDemoData()" onclick="this.disabled=true" class="btn btn-primary action">View demo data</button>\n' + "    </div>\n" + "  </div>\n" + "</div>");
        $templateCache.put("performance/includes/time-filters.html", "<!-- filtering -->\n" + "\n" + "\n" + "  <!-- custom errors-crashes filtering -->\n" + '  <div class="btn-group" ng-if="ecHideChartFilters === true">\n' + '    <a class="btn dropdown-toggle filter-selector action" data-toggle="dropdown">\n' + '      <span class="filter-ec">{{ecDetailedView.label}}</span>\n' + '      <span class="caret"></span>\n' + "    </a>\n" + '    <ul class="dropdown-menu">\n' + '      <li ng-repeat="detailedView in ecDetailedViewList" class="filterItem"><a ng-click="changeEcDetailedView(detailedView)">{{detailedView.label}}</a></li>\n' + "    </ul>\n" + "  </div>\n" + "  <!--common/global monitoring filters-->\n" + '  <div class="btn-group" ng-if="ecHideChartFilters !== true || ecDetailChartFilters === true">\n' + "\n" + '    <a class="btn dropdown-toggle filter-selector" data-toggle="dropdown">\n' + '      <span class="filter-label">{{selectedChartCriteria.chartName}}</span>\n' + '      <span class="caret"></span>\n' + "    </a>\n" + '    <ul class="dropdown-menu" chart-filter="chartCriteria">\n' + "    </ul>\n" + "  </div>\n" + '  <div class="btn-group">\n' + '    <a class="btn dropdown-toggle filter-selector" data-toggle="dropdown">\n' + '      <span class="filter-label">{{selectedtimefilter.label}}</span>\n' + '      <span class="caret"></span>\n' + "    </a>\n" + '    <ul class="dropdown-menu" time-filter="timeFilters">\n' + "    </ul>\n" + "  </div>\n" + "  <div class=\"btn-group compare\" ng-class=\"(currentCompare === 'LAST_WEEK') ? 'selected' : ''\">\n" + '    <a class="btn filter-selector" ng-click="compare(\'LAST_WEEK\',false)">\n' + '      <span class="filter-label"><i class="pictogram">&#57347;</i>Compare Last Week</span>\n' + "    </a>\n" + "  </div>\n" + "  <div class=\"btn-group compare\" ng-class=\"(currentCompare === 'YESTERDAY') ? 'selected' : ''\">\n" + '    <a class="btn filter-selector" ng-click="compare(\'YESTERDAY\',false)">\n' + '      <span class="filter-label"><i class="pictogram">&#57347;</i>Compare Yesterday</span>\n' + "    </a>\n" + "  </div>\n" + '  <div class="pull-right auto-update-container">\n' + '    <a class="auto-updates" ng-show="showAutoRefresh && !hideAutoupdate" ng-click="toggleAutoUpdate()"><i ng-if="autoUpdate !== null" class="pictogram title" style="width:13px">&#9632;</i><i ng-if="autoUpdate === null" class="pictogram title" style="width:13px">&#9654;</i> Turn auto updates <span ng-if="autoUpdate !== null">off ({{autoUpdateTimer}})</span><span ng-if="autoUpdate === null">on</span></a>\n' + "  </div>\n");
        $templateCache.put("push/push-config.html", '<div class="content-page">\n' + '    <page-title icon="&#9874;" title="Configuration"></page-title>\n' + "\n" + "\n" + '  <bsmodal id="deleteNotifier"\n' + '           title="Delete Notifier"\n' + '           close="hideModal"\n' + '           closelabel="Cancel"\n' + '           extrabutton="deleteNotifiersDialog"\n' + '           extrabuttonlabel="Delete"\n' + "           ng-cloak>\n" + "    <p>Are you sure you want to delete the notifier(s)?</p>\n" + "  </bsmodal>\n" + "\n" + '  <a style="float: right" target="_blank" href="http://apigee.com/docs/usergrid/content/push-notifications" class="notifications-links">Learn more in our docs</a>\n' + "  <tabs>\n" + '    <pane heading="Apple">\n' + '      <div style="margin-top: 10px;"> <!-- ng-controller="PushConfigCtrl"-->\n' + '        <div class="user-header-title">Apple Push Notification Service</div>\n' + "        <br>\n" + "        A Notifier allows App Services to connect to and deliver a message to a communication provider such as\n" + "        Apple's APNs. Upload Development and Production Certificates (.p12) to set up a bridge between your app\n" + "        and APNs for push notifications on iOS devices.\n" + "\n" + "          For more help: view our\n" + '          <a href="#!/push/getStarted" class="notifications-links">getting started page</a>\n' + "          for more info on how to generate and download an iOS .p12 certificate at the Apple Developer Connection website.\n" + "          <br>\n" + "          <br>\n" + '        <form name="iosNotifierForm" id="iosNotifierForm"  ng-submit="createAppleNotifier()" class="form-horizontal" novalidate>\n' + "\n" + "          <fieldset>\n" + '            <div class="control-group">\n' + '              <label  for="ios-notifier-name"><strong>Name this notifier </strong></label>\n' + '              <div class="">\n' + '                <input type="text" id="ios-notifier-name" required ug-validate ng-model="notifier.appleNotifierName" class="" class="span6">\n' + "                <br>\n" + "                The notifier name is used as the key for push data.  Give this a name that describes the certificate being uploaded.\n" + "              </div>\n" + "            <br>\n" + '              <label  for="ios-cert"><strong>Certificate </strong></label>\n' + '              <div class="">\n' + '                <input type="file" data-file="param.file"  id="ios-cert" />\n' + "              </div>\n" + "            <br>\n" + "              <strong>Environment </strong>\n" + '              <div class="">\n' + '                <select ng-model="notifier.appleEnvironment" required ug-validate id="ios-env">\n' + '                  <option value="development">development</option>\n' + '                  <option value="production">production</option>\n' + "                </select>\n" + "              </div>\n" + "            <br>\n" + "              <strong>Certificate Password</strong>\n" + '              <div class="">\n' + '                <input ng-model="notifier.appleCertPassword" type="text"  title="Please enter a password." class="span6" autocomplete="off" placeholder="ex: appledev"/>\n' + "                <br>\n" + "                Only applicable if your certificate is password protected\n" + "              </div>\n" + "            </div>\n" + "\n" + '            <input type="submit" ng-disabled="!iosNotifierForm.$valid" class="btn btn-primary" value="Create Notifier"/>\n' + "          </fieldset>\n" + "        </form>\n" + "\n" + "      </div>\n" + "\n" + "    </pane>\n" + '    <pane heading="Android">\n' + "\n" + '      <div style="margin-top: 10px;">\n' + '        <span class="title">Google Cloud Messaging</span>\n' + "        <br>\n" + "        A Notifier allows App Services to connect to and deliver a message to a communication provider such as\n" + "        Google Cloud Messaging (GCM). Copy and paste your API key to create a bridge between your app\n" + "        and GCM for push notifications on Android devices..\n" + "        <br><br>\n" + "\n" + '        For more help: see our <a href="#!/getting-started/setup" class="notifications-links">getting started page</a> page.\n' + "\n" + '        <form id="droidNotifierForm" name="droidNotifierForm" ng-submit="createAndroidNotifier()" class="form-horizontal" novalidate>\n' + "          <fieldset>\n" + '            <div class="control-group">\n' + "              <strong>Name this notifier </strong>\n" + "              <div  >\n" + '                <input ng-model="notifier.androidNotifierName" id="droid-notifier-name" required ug-validate type="text" class="span6" autocomplete="off" placeholder="ex: androidDev"/>\n' + "                <br>\n" + "                The notifier name is used as the key for push data.  Give this a name that describes the API key being uploaded.\n" + "              </div>\n" + "            </div>\n" + "\n" + '            <div class="control-group">\n' + "              <strong>API Key </strong>\n" + "              <div  >\n" + '                <input ng-model="notifier.androidNotifierAPIKey" id="droid-key-value" required type="text" class="span6" autocomplete="off" ug-validate/>\n' + "              </div>\n" + "            </div>\n" + '            <input type="submit" href="" class="btn btn-primary" ng-disabled="!droidNotifierForm.$valid"  value="Create Notifier"/>\n' + "          </fieldset>\n" + "          </form>\n" + "      </div>\n" + "\n" + "    </pane>\n" + '    <pane heading="Notifiers">\n' + "\n" + '        <bsmodal id="deleteNotifiers"\n' + '                 title="Are you sure you want to delete the notifiers(s)?"\n' + '                 close="hideModal"\n' + '                 closelabel="Cancel"\n' + '                 extrabutton="deleteNotifiersDialog"\n' + '                 extrabuttonlabel="Delete"\n' + "                 ng-cloak>\n" + "            <fieldset>\n" + '                <div class="control-group">\n' + "                </div>\n" + "            </fieldset>\n" + "        </bsmodal>\n" + "\n" + '      <span  class="button-strip">\n' + '        <button class="btn btn-primary" ng-disabled="!valueSelected(notifiersCollection._list)" ng-click="deleteNotifiersDialog()">Delete Notifier(s)</button>\n' + "      </span>\n" + '      <table class="table table-striped collection-list">\n' + "        <tbody>\n" + '        <tr class="zebraRows notifications-row">\n' + '          <td style="width: 30px;"><input type="checkbox"  ng-click="selectAllEntities(notifiersCollection._list,this,\'queryBoxesSelected\',true)"></td>\n' + '          <td class="notifications-details bold-header">Provider</td>\n' + '          <td class="notifications-details bold-header">Notifier</td>\n' + "        </tr>\n" + "\n" + '        <tr class="zebraRows notifications-row" ng-repeat="notifier in notifiersCollection._list">\n' + "          <td>\n" + "            <input\n" + '              type="checkbox"\n' + '              ng-value="notifier.uuid"\n' + "\n" + '              ng-model="notifier.checked"\n' + "              >\n" + "          </td>\n" + "          <td class=\"details\">{{notifier.get('provider')}}</td>\n" + "          <td class=\"details\">{{notifier.get('name')}}</td>\n" + "        </tr>\n" + "      </table>\n" + "    </pane>\n" + "\n" + "\n" + "  </tabs>\n" + "\n" + "</div>");
        $templateCache.put("push/push-get-started.html", "\n" + '<div class="content-page">\n' + '    <page-title icon="&#59176;" title="Getting Started"></page-title>\n' + "\n" + "\n" + "\n" + "  <div>\n" + "    <tabs>\n" + '      <pane heading="Apple">\n' + '        <span class="title">Set up Push Notifications for Apple iOS</span>\n' + '        <div class="notifications-get-started">\n' + '          <div class="header">\n' + '            <img src="img/push/step_1.png" style="float: left;padding-right: 10px;">\n' + '            <div style="padding-top: 9px;">\n' + '              Follow <a target="_blank" href="http://apigee.com/docs/usergrid/content/push-notifications" class="notifications-links">the process</a> to generate and download an iOS .p12 certificate at the <a href="https://developer.apple.com/ios/manage/overview/index.action">Apple Developer Connection website</a>.\n' + "            </div>\n" + "          </div>\n" + '          <img style="margin-bottom: -5px;" src="img/push/APNS_cert_upload.png">\n' + "        </div>\n" + "\n" + '        <div class="notifications-get-started">\n' + '          <div class="header">\n' + '            <img src="img/push/step_2.png" style="float: left;padding-right: 10px;">\n' + '            <div style="padding-top: 9px;">\n' + "              Add the certificates to set up your notifiers.\n" + "            </div>\n" + "          </div>\n" + '          <div style="">\n' + '            <a href="#!/push/configuration">Upload a certificate and create the connection to APNs.</a>\n' + "          </div>\n" + '          <img style="margin-left: 50px; margin-bottom: -5px;" src="img/push/APNS_certification.png">\n' + "        </div>\n" + "\n" + '        <div class="notifications-get-started">\n' + '          <div class="header">\n' + '            <img src="img/push/step_3.png" style="float: left;padding-right: 10px;">\n' + '            <div style="padding-top: 9px;">\n' + "              Compose and schedule a push notification.\n" + "            </div>\n" + "          </div>\n" + '          <div style="">\n' + '            <a href="#!/push/sendNotification">Send a push notification.</a>\n' + "          </div>\n" + "          <br><br>\n" + '          <img style="margin-left: 58px; margin-bottom: -5px;" src="img/push/iphone_message.png">\n' + "        </div>\n" + "      </pane>\n" + '      <pane heading="Android">\n' + '        <span class="title">Set up Push Notifications for Google Android</span>\n' + '        <div class="notifications-get-started">\n' + '          <div class="header">\n' + '            <img src="img/push/step_1.png" style="float: left;padding-right: 10px;">\n' + '            <div style="padding-top: 9px;">\n' + '              Retrieve your API key from the <a href="https://code.google.com/apis/console/" target="_blank">Android API Developer website</a>\n' + "            </div>\n" + "          </div>\n" + '          <img style="margin-bottom: -5px;" src="img/push/google_api_key.png">\n' + "        </div>\n" + "\n" + '        <div class="notifications-get-started">\n' + '          <div class="header">\n' + '            <img src="img/push/step_2.png" style="float: left;padding-right: 10px;">\n' + '            <div style="padding-top: 9px;">\n' + "              Add your API key to set up your notifiers.\n" + "            </div>\n" + "          </div>\n" + '          <div style="">\n' + '            <a href="#!/push/configuration">Copy and paste your Google API Access key.</a>\n' + "          </div>\n" + '          <img style="margin-left: 50px; margin-bottom: -5px;" src="img/push/APNS_certification.png">\n' + "        </div>\n" + "\n" + '        <div class="notifications-get-started">\n' + '          <div class="header">\n' + '            <img src="img/push/step_3.png" style="float: left;padding-right: 10px;">\n' + '            <div style="padding-top: 9px;">\n' + "              Compose and schedule a push notification.\n" + "            </div>\n" + "          </div>\n" + '          <div style="">\n' + '            <a href="#!/push/sendNotification">Send a push notification.</a>\n' + "          </div>\n" + "          <br><br>\n" + '          <img style="margin-left: 58px; margin-bottom: -5px;" src="img/push/android-notification.png">\n' + "        </div>\n" + "\n" + "      </pane>\n" + "    </tabs>\n" + "  </div>\n" + "</div>\n");
        $templateCache.put("push/push-history.html", '<div class="content-page" style="min-height: 500px;">\n' + '    <page-title icon="&#9991;" title="Message History"></page-title>\n' + "\n" + "\n" + "\n" + '  <section class="row-fluid">\n' + '    <div class="span12">\n' + '        <a style="float: right" target="_blank" href="http://apigee.com/docs/usergrid/content/push-notifications" class="notifications-links">Learn more in our docs</a>\n' + "\n" + '        <div class="pull-left" style="margin-top: 10px;">\n' + '          <ul class="nav nav-pills">\n' + '            <li ng-class="selectedHistory.name === option.name ? \'active\' : \'\'" ng-repeat="option in historyList"><a ng-click="showHistory(option)">{{option.name}}</a></li>\n' + "          </ul>\n" + "        </div>\n" + "     </div>\n" + "    </section>\n" + '  <section class="row-fluid">\n' + '    <div class="span12">\n' + '      <div ng-if="notificationCollection._list.length === 0">\n' + "        No messages found\n" + "      </div>\n" + "\n" + '      <div ng-repeat="notification in notificationCollection._list">\n' + '        <div style="border: 1px solid #aaa;">\n' + '            <div class="notifications-header">\n' + '              <div style="float: left">\n' + "                <strong>Send Date:</strong>\n" + "                {{getNotificationStartedDate(notification._data) | date:'EEEE, MMMM d, y h:mm:ss a'}}\n" + '                <div style="margin-top: 10px;">\n' + '                  <img ng-src="{{getStateImage(notification)}}" style="vertical-align:middle;margin-top: -3px;"> {{getStateMessage(notification)}}\n' + "                </div>\n" + "              </div>\n" + '              <div style="float: right; text-align: right;">\n' + '                &nbsp; <a href="" class="notifications-links" ng-click="viewReceipts(notification._data.uuid)">view details</a>\n' + "                <br>Total Sent: {{notification._data.statistics.sent ? notification._data.statistics.sent : 0}} Total Errors: {{notification._data.statistics.errors ? notification._data.statistics.errors : 0}}\n" + "                <br>\n" + "                <b>UUID</b>:\n" + '                <a href="" ng-click="viewReceipts(\'{{notification._data.uuid}}\')">{{notification._data.uuid}}</a>\n' + "              </div>\n" + "            </div>\n" + '            <div style="padding: 10px;">\n' + "             <div> payload: {{notification._data.payloads}} </div>\n" + '             <div ng-if="notification._data.errorMessage"> error message: {{notification._data.errorMessage}} </div>\n' + "            </div>\n" + "          </div>\n" + "          <br>\n" + "        </div>\n" + "\n" + '        <div style="height:20px">&nbsp;</div>\n' + '        <div style="padding: 10px 5px 10px 5px">\n' + '          <button class="btn btn-primary" ng-click="getPrevious()" style="display:{{previous_display}}">< Previous</button>\n' + '          <button class="btn btn-primary" ng-click="getNext()" style="display:{{next_display}}; float:right;">Next ></button>\n' + "        </div>\n" + "      </div>\n" + "   </section>\n" + "</div>\n");
        $templateCache.put("push/push-receipts.html", '<div class="content-page" style="min-height: 500px;">\n' + '  <span style="float: left">\n' + '    <a href="#!/push/history" class="notifications-links" id="return-to-notifications"><- Return to All Notifications</a></span>\n' + "  <br>\n" + "\n" + '  <div style="clear: both;">&nbsp;</div>\n' + '  <table class="table">\n' + "    <tbody>\n" + '    <tr class="zebraRows notifications-row">\n' + '      <td class="notifications-details bold-header">Created</td>\n' + '      <td class="notifications-details bold-header">Payload</td>\n' + '      <td class="notifications-details bold-header">Sent</td>\n' + '      <td class="notifications-details bold-header">Error</td>\n' + "    </tr>\n" + "\n" + '    <tr class="zebraRows notifications-row" ng-repeat="receipt in receiptsCollection._list">\n' + "      <td class=\"details\">{{receipt.get('created')}}</td>\n" + "      <td class=\"details\">{{receipt.get('payload')}}</td>\n" + "      <td class=\"details\">{{receipt.get('sent')}}</td>\n" + "      <td class=\"view-details\">{{receipt.get('errorCode') + (receipt.get('errorCode') ? ':' : '')}} {{receipt.get('errorMessage')}}</td>\n" + "    </tr>\n" + "  </table>\n" + "  <br>\n" + "\n" + "\n" + "\n" + '  <div style="height:20px">&nbsp;</div>\n' + '  <div style="padding: 10px 5px 10px 5px">\n' + '    <button class="btn btn-primary" ng-click="getPrevious()" style="display:{{previous_display}}">< Previous</button>\n' + '    <button class="btn btn-primary" ng-click="getNext()" style="display:{{next_display}}; float:right;">Next ></button>\n' + "  </div>\n" + "\n" + "</div>\n" + "\n" + "\n" + "\n" + '<!--div id="notificationsReceipt-panel" class="panel-buffer">\n' + '  <div class="well thingy">\n' + '    <span class="title">Notification Receipts</span>\n' + '    <span style="float: right"><a href="#" class="notifications-links" id="return-to-notifications"><- Return to All Notifications</a></span>\n' + "  </div>\n" + '  <div style="float: left">\n' + '    <ul class="nav nav-pills">\n' + '      <li class="active"><a href="#" id="view-notification-receipt-all">All</a></li>\n' + '      <li><a href="#" id="view-notification-receipt-received">Received</a></li>\n' + '      <li><a href="#" id="view-notification-receipt-failed">Failed</a></li>\n' + "    </ul>\n" + "  </div>\n" + '  <div style="margin-top:35px;">&nbsp;</div>\n' + '  <div id="notification-receipts-display">\n' + "    <br><br>No Notifications found.\n" + "  </div>\n" + "\n" + '  <ul id="notification-receipt-pagination" class="pager">\n' + '    <li style="display: none" id="notification-receipt-previous" class="previous"><a >&larr; Previous</a></li>\n' + '    <li style="display: none" id="notification-receipt-next" class="next"><a >Next &rarr;</a></li>\n' + "  </ul>\n" + "\n" + "</div-->");
        $templateCache.put("push/push-send-notification.html", '<div class="content-page">\n' + "\n" + "\n" + '    <page-title icon="&#128319;" title="Send Notification"></page-title>\n' + "\n" + "\n" + '  <a style="float: right" target="_blank" href="http://apigee.com/docs/usergrid/content/push-notifications" class="notifications-links">Learn more in our docs</a>\n' + "\n" + '  <form id="query-inputs" class="notifcations-form" ng-submit="scheduleNotification()" novalidate name="send">\n' + "    <h4>Notifier and Recipients</h4>\n" + "    Choose the Notifier (a configured notification service) to connect with for this push notification. Only users\n" + "    with devices registered with this notifier will receive the push notification. If a group is selected, only the users\n" + "    in the selected goup, with devices registered with this notifier, will receive the push notification.\n" + "\n" + "    <br/><br/>\n" + '    <label for="send-notification-notifier">Notifier:</label>\n' + '    <select name="notifierName" ng-required="true" id="send-notification-notifier" ng-model="send.selectedNotifier" ng-options="n._data.name for n in notifiersCollection">\n' + '      <option value="">Choose Notifier</option>\n' + "    </select>\n" + '    <span ng-show="send.notifierName.$dirty && send.notifierName.$error.required">\n' + "      You must choose a notifier\n" + "    </span>\n" + "\n" + '    <div class="control-group">\n' + '      <input type="radio" name="notification-user-group" id="notification-user-group-all"  ng-required="true"  ng-model="send.controlGroup" value="all" checked> All Devices\n' + '      <input type="radio" name="notification-user-group" id="notification-user-group-devices" ng-required="true"  ng-model="send.controlGroup" value="devices"> Devices\n' + '      <input type="radio" name="notification-user-group" id="notification-user-group-users" ng-required="true"  ng-model="send.controlGroup" value="users"> Users\n' + '      <input type="radio" name="notification-user-group" id="notification-user-group-group" ng-required="true"  ng-model="send.controlGroup" value="groups"> Groups\n' + "    </div>\n" + "\n" + '    <div class="control-group">\n' + '      <div id="notificaitons-devices-select-container" ng-show="send.controlGroup === \'devices\'">\n' + "        Enter the device uuids:<br>\n" + '        <textarea id="devices-list" placeholder="device-UUID-1,device-UUID-2,device-UUID-3,etc..."   ng-model="send.devices" ng-list class="span6 pull-left" rows="5" ng-required="send.controlGroup === \'devices\'"></textarea>\n' + "      </div>\n" + "\n" + '      <div id="notificaitons-users-select-container" ng-show="send.controlGroup === \'users\'">\n' + "      Enter the usernames:<br>\n" + '      <textarea id="user-list" placeholder="username1,username2,username3,etc..."   ng-model="send.users" ng-list class="span6 pull-left" rows="5" ng-required="send.controlGroup === \'users\'"></textarea>\n' + "      <!--br>\n" + '      <div class="thingy">\n' + "      Or, use a form to look them up:<br>\n" + '      <a style="margin-right: 15px;" class="btn btn-primary" data-toggle="modal" href="#dialog-form-add-user-to-notification"> Add User</a>\n' + "      </div-->\n" + "    </div>\n" + '      <div id="notificaitons-group-select-container" ng-show="send.controlGroup === \'groups\'">\n' + "        Enter the group paths:<br>\n" + '        <textarea id="group-list" placeholder="group-path-1,group-path-2,group-path-3,etc..."   ng-model="send.groups" ng-list class="span6 pull-left" rows="5" ng-required="send.controlGroup === \'groups\'"></textarea>\n' + "        <!--br>\n" + '        <div class="thingy">\n' + '        <a style="margin-right: 15px;" class="btn btn-primary" data-toggle="modal" href="#dialog-form-add-group-to-notification"> Add Group</a>\n' + "        </div-->\n" + "      </div>\n" + "    </div>\n" + "\n" + "    <hr>\n" + "    <h4>Notifier Message</h4>\n" + '    Edit the "alert" message in the JSON payload.\n' + '    <div class="controls">\n' + "      <div>\n" + '        <textarea id="notification-json" class="span6 pull-left" rows="3" ng-model="send.notifierMessage" required ug-validate>Your text here</textarea>\n' + "        <br>\n" + '        <a target="_blank" href="http://apigee.com/docs/usergrid/content/push-notifications" class="notifications-links">Learn more about messages in our docs</a>\n' + "      </div>\n" + "    </div>\n" + '    <div style="display: none;">\n' + '      <a class="btn" id="reset-notifications-payload" >Reset Payload</a>\n' + '      <a class="btn" id="validate-notifications-json" >Validate JSON</a>\n' + '      <span id="notifications-json-status" class="alert" style="width: 400px;">Validate your JSON!</span>\n' + "    </div>\n" + "    <hr>\n" + "    <h4>Delivery</h4>\n" + "    Select whether to schedule this push notification for immediate delivery or at a future date and time.\n" + "\n" + '    <div class="control-group">\n' + '      <input type="radio" name="notification-schedule-time" id="notification-schedule-time-now"  ng-required="true" ng-model="send.deliveryPeriod" value="now" checked> Now\n' + '      <input type="radio" name="notification-schedule-time" id="notification-schedule-time-later"  ng-required="true" ng-model="send.deliveryPeriod" value="later"> Schedule for later\n' + "    </div>\n" + '    <div id="notification-schedule-time-controls" ng-show="send.deliveryPeriod === \'later\'">\n' + '      <div id="notifications-start-time-span" class="control-group">\n' + '        <label class="control-label" for="notification-schedule-time-date">Start Date/Time:</label>\n' + '        <div class="controls">\n' + '          <input type="text" id="notification-schedule-time-date" name="schedule-date" class="input-small"/>\n' + '          <input type="text" id="notification-schedule-time-time" name="schedule-time" value="12:00 AM" class="input-small"/> (<span id="gmt_display"></span>)\n' + "        </div>\n" + "      </div>\n" + "    </div>\n" + "    <br/>\n" + '    <p ng-show="send.$invalid">Please complete all required information before submitting.</p>\n' + '    <input type="submit" ng-disabled="!send.$valid" name="submit" class="btn btn-primary" />\n' + "  </form>\n" + "</div>\n" + "\n" + "\n" + '<form id="dialog-form-add-user-to-notification" class="modal hide fade">\n' + '  <div class="modal-header">\n' + '    <a class="close" data-dismiss="modal">&times</a>\n' + "    <h4>Add a user to this Notification</h4>\n" + "  </div>\n" + '  <div class="modal-body">\n' + '    <p class="validateTips">Search for the user you want to add to this notification.</p>\n' + "    <fieldset>\n" + '      <div class="control-group">\n' + '        <label for="search-notification-user-name-input">User</label>\n' + '        <div class="controls">\n' + '          <input type="text" name="search-notification-user-name-input" id="search-notification-user-name-input" class="input-xlarge"/>\n' + '          <p class="help-block hide"></p>\n' + "        </div>\n" + "      </div>\n" + "    </fieldset>\n" + "  </div>\n" + '  <div class="modal-footer">\n' + '    <input type="submit" class="btn btn-usergrid" value="Add"/>\n' + '    <input type="reset" class="btn" value="Cancel" data-dismiss="modal"/>\n' + "  </div>\n" + "</form>\n" + "\n" + '<form id="dialog-form-add-group-to-notification" class="modal hide fade">\n' + '  <div class="modal-header">\n' + '    <a class="close" data-dismiss="modal">&times</a>\n' + "    <h4>Add a group to this Notification</h4>\n" + "  </div>\n" + '  <div class="modal-body">\n' + '    <p class="validateTips">Search for the group you want to add to this notification.</p>\n' + "    <fieldset>\n" + '      <div class="control-group">\n' + '        <label for="search-notification-group-name-input">Group</label>\n' + '        <div class="controls">\n' + '          <input type="text" name="search-notification-group-name-input" id="search-notification-group-name-input" class="input-xlarge"/>\n' + '          <p class="help-block hide"></p>\n' + "        </div>\n" + "      </div>\n" + "    </fieldset>\n" + "  </div>\n" + '  <div class="modal-footer">\n' + '    <input type="submit" class="btn btn-usergrid" value="Add"/>\n' + '    <input type="reset" class="btn" value="Cancel" data-dismiss="modal"/>\n' + "  </div>\n" + "</form>");
    } ]);
    "use strict";
    AppServices.MAX = AppServices.MAX || angular.module("appservices.max", []);
    AppServices.MAX.directive("slidecheckbox", [ "$rootScope", function($rootScope) {
        return {
            restrict: "ECA",
            scope: {
                data: "=data"
            },
            templateUrl: "performance/checkbox-template.html",
            replace: true,
            transclude: true,
            link: function linkFn(scope, lElement, attrs) {
                scope.label = attrs.label;
            }
        };
    } ]);
    "use strict";
    AppServices.MAX = AppServices.MAX || angular.module("appservices.max", []);
    AppServices.MAX.controller("ConfigureCtrl", [ "data", "$scope", "$rootScope", "$log", function(data, $scope, $rootScope, $log) {
        $scope.logLevels = [ {
            value: 2,
            label: "Verbose"
        }, {
            value: 3,
            label: "Debug"
        }, {
            value: 4,
            label: "Info"
        }, {
            value: 5,
            label: "Warn"
        }, {
            value: 6,
            label: "Error"
        }, {
            value: 7,
            label: "Assert"
        } ];
        var getAccessToken = function() {
            return sessionStorage.getItem("accessToken");
        };
        function configPageSetup() {
            $scope.deviceNumberFilters = "";
            $scope.deviceIdFilters = "";
            $scope.defaultAppConfigParameters = [ {
                tag: "",
                paramKey: "",
                paramValue: ""
            } ];
            $scope.deviceLevelConfigParameters = [ {
                tag: "",
                paramKey: "",
                paramValue: ""
            } ];
            $scope.abConfigParameters = [ {
                tag: "",
                paramKey: "",
                paramValue: ""
            } ];
            $scope.$on("app-initialized", function() {
                var configData = data.resource({
                    appname: $rootScope.currentApp,
                    orgname: $rootScope.currentOrg,
                    username: "apm",
                    endpoint: "apigeeMobileConfig"
                }, false).get({
                    callback: "JSON_CALLBACK",
                    access_token: getAccessToken()
                }, function(cdata) {
                    $scope.configData = cdata;
                    if (cdata.deviceNumberFilters && cdata.deviceNumberFilters.length > 0) {
                        angular.forEach(cdata.deviceNumberFilters, function(value, key) {
                            $scope.deviceNumberFilters += value.filterValue + "\n";
                        });
                    }
                    if (cdata.deviceIdFilters && cdata.deviceIdFilters.length > 0) {
                        angular.forEach(cdata.deviceIdFilters, function(value, key) {
                            $scope.deviceIdFilters += value.filterValue + "\n";
                        });
                    }
                    angular.forEach($scope.logLevels, function(value, key) {
                        if (cdata.defaultAppConfig.logLevelToMonitor === value.value) {
                            $scope.appConfigLogLevel = $scope.logLevels[key];
                        }
                    });
                    if (cdata.defaultAppConfig.customConfigParameters.length > 0) {
                        $scope.defaultAppConfigParameters = cdata.defaultAppConfig.customConfigParameters;
                    }
                    angular.forEach($scope.logLevels, function(value, key) {
                        if (cdata.deviceLevelAppConfig.logLevelToMonitor === value.value) {
                            $scope.betaLogLevel = $scope.logLevels[key];
                        }
                    });
                    if (cdata.deviceLevelAppConfig.customConfigParameters.length > 0) {
                        $scope.deviceLevelConfigParameters = cdata.deviceLevelAppConfig.customConfigParameters;
                    }
                    angular.forEach($scope.logLevels, function(value, key) {
                        if (cdata.abtestingAppConfig.logLevelToMonitor === value.value) {
                            $scope.abLogLevel = $scope.logLevels[key];
                        }
                    });
                    if (cdata.abtestingAppConfig.customConfigParameters.length > 0) {
                        $scope.abConfigParameters = cdata.abtestingAppConfig.customConfigParameters;
                    }
                }, function(fail) {
                    $log.error("problem getting config data: ", fail);
                });
            });
        }
        configPageSetup();
        $scope.saveData = function(configStore) {
            var configStoreLength = $scope[configStore].length;
            if (configStoreLength > 0) {
                if ($scope[configStore][configStoreLength - 1].tag === "" || $scope[configStore][configStoreLength - 1].paramKey === "" || $scope[configStore][configStoreLength - 1].paramValue === "") {
                    $scope[configStore].pop();
                }
            }
            angular.forEach($scope[configStore], function(value, key) {
                if (value.index) {
                    delete value.index;
                }
            });
            var payload;
            $scope.configData.lastModifiedDate = new Date().getTime();
            payload = {
                apigeeMobileConfig: $scope.configData
            };
            data.resource({
                orgname: $rootScope.currentOrg,
                appname: $rootScope.currentApp
            }, false).save({
                access_token: getAccessToken()
            }, payload);
            $rootScope.$broadcast("alert", "success", "Your values have been saved.");
        };
        $scope.updateLogLevel = function(logLevel, dataAttr) {
            $scope.configData[dataAttr].logLevelToMonitor = logLevel.value;
        };
        $scope.updateFilter = function(filter, filterAttr, filterType) {
            var tempArray = filter.split("\n");
            $scope.configData[filterAttr] = [];
            for (var i = 0; i < tempArray.length; i++) {
                $scope.configData[filterAttr].push({
                    filterValue: tempArray[i],
                    filterType: filterType
                });
            }
        };
        $scope.addRemoveConfig = function(config, configStore) {
            var addNew = true;
            if (config.index === $scope[configStore].length) {
                if (config.paramValue === "" && config.tag === "" && config.paramKey === "") {
                    $scope[configStore].pop();
                    addNew = false;
                }
                if (addNew || 0 === $scope[configStore].length) {
                    $scope[configStore].push({
                        tag: "",
                        paramKey: "",
                        paramValue: ""
                    });
                }
            } else {
                angular.forEach($scope[configStore], function(value, key) {
                    if (value.tag === config.tag && value.paramKey === config.paramKey && value.paramValue === config.paramValue) {
                        $scope[configStore].splice([ key ], 1);
                    }
                });
            }
            if (configStore === "defaultAppConfigParameters") {
                $scope.configData.defaultAppConfig.customConfigParameters = $scope[configStore];
            } else if (configStore === "deviceLevelConfigParameters") {
                $scope.configData.deviceLevelAppConfig.customConfigParameters = $scope[configStore];
            } else if (configStore === "abConfigParameters") {
                $scope.configData.abtestingAppConfig.customConfigParameters = $scope[configStore];
            }
        };
    } ]);
    AppServices.MAX = AppServices.MAX || angular.module("appservices.max", []);
    AppServices.MAX.factory("data", function(ug) {
        return {
            get: function(id, url) {
                return ug.httpGet(id, url);
            },
            jsonp: function(objectType, criteriaId, params, successCallback) {
                return ug.jsonp(objectType, criteriaId, params, successCallback);
            },
            jsonp_simple: function(objectType, appId, params) {
                return ug.jsonpSimple(objectType, appId, params);
            },
            jsonp_raw: function(objectType, appId, params) {
                return ug.jsonpRaw(objectType, appId, params);
            },
            resource: function(params, isArray) {
                return ug.resource(params, isArray);
            },
            post: function(url, callback, payload, headers) {
                return ug.httpPost(url, callback, payload, headers);
            }
        };
    });
    AppServices.MAX = AppServices.MAX || angular.module("appservices.max", []);
    AppServices.MAX.directive("demoData", [ "$location", "$routeParams", "$rootScope", "$route", "$log", function($location, $routeParams, $rootScope, $route, $log) {
        return {
            restrict: "E",
            transclude: true,
            templateUrl: "performance/demo-data.html",
            link: function linkFn(scope, lElement, attrs) {
                scope.dataVals = {};
                scope.dataVals.showDemoBar = true;
                $rootScope.demoData = scope.dataVals.demoData = $location.search().demo === "true" || $rootScope.demoData;
                $rootScope.autoUpdate = $rootScope.autoUpdate || null;
                $rootScope.timerUpdate = $rootScope.timerUpdate || null;
                $rootScope.autoUpdateTimer = $rootScope.autoUpdateTimer || 31;
                $rootScope.keepGoing = true;
                $rootScope.currentSecond;
                scope.$watch("dataVals.demoData", function(value, oldvalue) {
                    if (value !== oldvalue) {
                        if (value) {
                            $routeParams.demo = "true";
                            $location.search("demo", "true");
                            $rootScope.demoData = true;
                        } else {
                            $routeParams.demo = "false";
                            $location.search("demo", "false");
                            $rootScope.demoData = false;
                        }
                        $route.reload();
                    }
                });
                scope.$on("toggle-demo-data", function() {
                    scope.dataVals.demoData = !scope.dataVals.demoData;
                });
                $rootScope.toggleAutoUpdate = function() {
                    var isPerformancePage = $location.path().slice(0, "/performance".length) === "/performance";
                    var animate = function() {
                        if ($rootScope.keepGoing && isPerformancePage) {
                            requestAnimFrame(animate);
                            draw();
                        }
                    };
                    var draw = function() {
                        if (!$rootScope.$$phase && $rootScope.currentSecond !== new Date().getSeconds()) {
                            $rootScope.$apply(function() {
                                $rootScope.autoUpdateTimer--;
                                if ($rootScope.autoUpdateTimer === 0) {
                                    var refreshts = new Date();
                                    $routeParams.ts = refreshts.getTime();
                                    $rootScope.autoUpdateTimer = 30;
                                }
                            });
                            $rootScope.currentSecond = new Date().getSeconds();
                        }
                    };
                    if (!$rootScope.autoUpdate && isPerformancePage) {
                        $log.info("start timers");
                        $rootScope.autoUpdate = true;
                        $rootScope.keepGoing = true;
                        animate();
                    } else {
                        $rootScope.keepGoing = false;
                        $rootScope.autoUpdate = null;
                    }
                };
                scope.$on("app-changed", function() {
                    scope.dataVals.demoData = false;
                });
                scope.$on("org-changed", function() {
                    scope.dataVals.demoData = false;
                });
                scope.$on("toggle-auto-update", function() {
                    $rootScope.toggleAutoUpdate();
                });
                scope.toggleDemoData = function() {
                    $rootScope.$broadcast("toggle-demo-data");
                };
                if ($rootScope.autoUpdate == null) {}
            }
        };
    } ]);
    AppServices.MAX = AppServices.MAX || angular.module("appservices.max", []);
    AppServices.MAX.directive("timeFilter-log", [ "$location", "$routeParams", "$rootScope", function($location, $routeParams, $rootScope) {
        return {
            restrict: "A",
            transclude: true,
            template: '<li ng-repeat="time in timeFilters" class="filterItem"><a ng-click="changeTimeFilter(time)">{{time.label}}</a></li>',
            link: function linkFn(scope, lElement, attrs) {
                var menuContext = attrs.filter;
                scope.changeTimeFilter = function(newTime) {
                    scope.selectedtimefilter = newTime;
                    $routeParams.timeFilter = newTime.value;
                };
                lElement.bind("click", function(cevent) {
                    menuBindClick(scope, lElement, cevent, menuContext);
                });
            }
        };
    } ]);
    "use strict";
    AppServices.MAX = AppServices.MAX || angular.module("appservices.max", []);
    AppServices.MAX.controller("PerformanceCtrl", [ "data", "charts", "$scope", "$routeParams", "$location", "$rootScope", "$compile", "$anchorScroll", "$log", "$q", function(data, charts, $scope, $routeParams, $location, $rootScope, $compile, $anchorScroll, $log, $q) {
        $rootScope.performance = $rootScope.performance || {
            showHelpButton: true
        };
        $scope.routeParams = $routeParams;
        $scope.location = $location;
        $scope.showAutoRefresh = Usergrid.options.showAutoRefresh;
        $rootScope.currentAppId = 1;
        var deviceModelFilter, osVersionFilter, platformFilter, appVersionFilter;
        var appConfig = null;
        var getAppConfig = function() {
            var deferred = $q.defer();
            $scope.$on("app-initialized", function() {
                if (!appConfig) {
                    data.jsonp_simple("apigeeMobileConfig", "", {
                        demoApp: $rootScope.demoData
                    }).then(function(appConfig) {
                        setAppId(appConfig.instaOpsApplicationId);
                        deferred.resolve();
                    });
                } else {
                    deferred.resolve();
                }
            });
            return deferred.promise;
        };
        var setAppId = function(appId) {
            $rootScope.currentAppId = appId;
        };
        var getChartCriteria = function() {
            return data.jsonp_simple(chartCriteria, $rootScope.currentAppId, {
                demoApp: $rootScope.demoData
            });
        };
        var determineChartCriteria = function(chartCriteriaList) {
            $scope.chartCriteriaOptions = chartCriteriaList;
            angular.forEach(chartCriteriaList, function(value, key) {
                switch (value.chartName) {
                  case "by App Versions":
                    $scope.criteriaAppVersions = value.chartCriteriaId;
                    break;

                  case "by Config Overrides":
                    $scope.criteriaConfigOverrides = value.chartCriteriaId;
                    break;

                  case "by Platforms":
                    $scope.criteriaPlatforms = value.chartCriteriaId;
                    break;

                  case "by Device Models":
                    $scope.criteriaDeviceModels = value.chartCriteriaId;
                    break;

                  case "by OS Versions":
                    $scope.criteriaOSVersions = value.chartCriteriaId;
                    break;

                  case "by Network Types":
                    $scope.criteriaNetworkTypes = value.chartCriteriaId;
                    break;

                  case "by Carriers":
                    $scope.criteriaCarriers = value.chartCriteriaId;
                    break;

                  case "by Domain":
                    $scope.criteriaDomain = value.chartCriteriaId;
                    break;
                }
            });
        };
        function initChartFilters(newFilter, chartFilterType) {
            deviceModelFilter = {
                currentCompare: "NOW",
                timeFilter: newFilter.timeFilter
            };
            deviceModelFilter[chartFilterType] = $scope.criteriaDeviceModels;
            osVersionFilter = {
                currentCompare: "NOW",
                timeFilter: newFilter.timeFilter
            };
            osVersionFilter[chartFilterType] = $scope.criteriaOSVersions;
            platformFilter = {
                currentCompare: "NOW",
                timeFilter: newFilter.timeFilter
            };
            platformFilter[chartFilterType] = $scope.criteriaPlatforms;
            appVersionFilter = {
                currentCompare: "NOW",
                timeFilter: newFilter.timeFilter
            };
            appVersionFilter[chartFilterType] = $scope.criteriaAppVersions;
        }
        $rootScope.compareOptions = [ {} ];
        if (!$routeParams.currentCompare) {
            $rootScope.currentCompare = "NOW";
            $location.search("currentCompare", $rootScope.currentCompare);
        }
        if (!$routeParams.timeFilter) {
            $location.search("timeFilter", "1h");
        }
        var updatePreviouslyOn = false;
        $rootScope.compare = function(reference, toggleUpdate) {
            if (reference === $rootScope.currentCompare) {
                $rootScope.currentCompare = "NOW";
                if (toggleUpdate || updatePreviouslyOn) {
                    $scope.toggleAutoUpdate();
                }
                $rootScope.hideAutoupdate = false;
            } else {
                $rootScope.currentCompare = reference;
                updatePreviouslyOn = $rootScope.autoUpdate;
                if ($rootScope.currentCompare !== "NOW" && $rootScope.autoUpdate) {
                    $scope.toggleAutoUpdate();
                }
                $rootScope.hideAutoupdate = true;
            }
            $location.search("currentCompare", $rootScope.currentCompare);
        };
        var timeformat1 = "return Highcharts.dateFormat('%H:%M', this.value);";
        var timeformat2 = "return Highcharts.dateFormat('%a, %H:%M', this.value);";
        $rootScope.timeFilters = [ {
            value: "1h",
            label: "1 hour",
            settings: {
                xaxisformat: timeformat1,
                step: 3
            }
        }, {
            value: "3h",
            label: "3 hours",
            settings: {
                xaxisformat: timeformat1,
                step: 6
            }
        }, {
            value: "6h",
            label: "6 hours",
            settings: {
                xaxisformat: timeformat1,
                step: 10
            }
        }, {
            value: "12h",
            label: "12 hours",
            settings: {
                xaxisformat: timeformat1,
                step: 15
            }
        }, {
            value: "24h",
            label: "24 hours",
            settings: {
                xaxisformat: timeformat2,
                step: 1
            }
        }, {
            value: "1w",
            label: "1 week",
            settings: {
                xaxisformat: timeformat2,
                step: 10
            }
        } ];
        $rootScope.selectedtimefilter = validateFilter($location.search().timeFilter, $rootScope.timeFilters, "value");
        function validateFilter(paramValue, options, property) {
            if (paramValue && paramValue !== "") {
                var matchFound = false;
                for (var i = 0; i < options.length; i++) {
                    if (options[i][property] === paramValue) {
                        matchFound = true;
                        return options[i];
                    }
                }
                if (!matchFound) {
                    $routeParams[chartFilterContext] = options[0].chartCriteriaId;
                    return options[0];
                }
            } else {
                return options[0];
            }
        }
        if (!$rootScope.chartTemplate) {
            data.get(null, "js/charts/highcharts.json").then(function(success) {
                $rootScope.chartTemplate = success;
            }, function(fail) {
                $log.error("Problem getting chart template", fail);
            });
        }
        $rootScope.$on("ajax_loading", function(event, objectType) {
            if (objectType.indexOf("ChartData") > 0) {
                var allCharts = document.querySelectorAll(".anim-chart");
                try {
                    angular.forEach(allCharts, function(value, key) {
                        value.classList.add("fade-out");
                        value.classList.remove("fade-in");
                    });
                } catch (e) {
                    $log.error(e);
                }
            }
        });
        $rootScope.$on("ajax_finished", function(event, objectType) {
            if (objectType.indexOf("ChartData") > 0) {
                var allCharts = document.querySelectorAll(".anim-chart");
                try {
                    angular.forEach(allCharts, function(value, key) {
                        value.classList.add("fade-in");
                        value.classList.remove("fade-out");
                    });
                } catch (e) {
                    $log.error(e);
                }
            }
        });
        $scope.chartDataPresent = false;
        $scope.logDataPresent = false;
        $scope.chartDataWaiting = true;
        $scope.logDataWaiting = true;
        $scope.showlogBaloon = false;
        $scope.currentChartData = "";
        $scope.requestChartData = function(chartData, newFilter, callDesc, callback, runDataCheck) {
            data.jsonp(chartData, newFilter, callDesc, function(mydata) {
                if (runDataCheck && chartData !== $scope.currentChartData) {
                    if (mydata.chartData && $rootScope.currentCompare === "NOW") {
                        if (mydata.chartData.length === 0) {
                            $scope.chartDataPresent = false;
                        } else if (mydata.chartData.length === 1 && mydata.chartData[0].datapoints) {
                            $scope.chartDataPresent = mydata.chartData[0].datapoints.length !== 0;
                        } else {
                            $scope.chartDataPresent = true;
                        }
                    }
                    $scope.currentChartData = chartData;
                }
                callback(mydata);
                $scope.chartDataWaiting = false;
            }, function(fail) {
                $log.error("Problem getting initial chart data", fail);
            });
        };
        $scope.requestLogData = function(chartData, newFilter, callDesc, callback) {
            data.jsonp(chartData, newFilter, callDesc, function(mydata) {
                if (typeof mydata[0] !== "undefined") {
                    $scope.logDataPresent = true;
                }
                callback(mydata);
                $scope.logDataWaiting = false;
            }, function(fail) {
                $log.error("Problem getting initial log data", fail);
            });
        };
        $scope.convertChartType = function(method) {
            $scope.conversionMethod = method;
            var refreshts = new Date();
            $routeParams.ts = refreshts.getTime();
        };
        var chartCriteria = "", chartData = "", chartErrorMsg = "Error getting chart data", chartFilterContext = "", rawData, dataDescription;
        $scope.apiPerfSetup = function() {
            $rootScope.currentCompare = $routeParams.currentCompare = "NOW";
            chartCriteria = "networkChartCriteria";
            chartData = "networkChartData";
            rawData = "networkRawData";
            chartErrorMsg = "Error getting chart data";
            chartFilterContext = "networkChartFilter";
            dataDescription = {
                timeseries1: {
                    labels: [ "Milliseconds" ],
                    yAxisLabels: [ "" ],
                    dataAttr: [ "avgLatency" ],
                    colors: [ "#1b97d1", "#898989", "#ececec", "#ff33ee" ],
                    detailDataAttr: [ "avgLatency" ],
                    detailYaxisLabel: [ "Milliseconds" ]
                },
                timeseries2: {
                    labels: [ "Requests", "Errors" ],
                    yAxisLabels: [ "" ],
                    dataAttr: [ "samples", "errors" ],
                    colors: [ "#54828c", "#ff4300", "#ececec", "#ff33ee" ],
                    detailDataAttr: [ "samples" ],
                    detailYaxisLabel: [ "Request" ]
                },
                bar1: {
                    labels: [ "Milliseconds" ],
                    dataAttr: [ "attribute", "value" ],
                    colors: [ createGradient("rgba(36,151,212,0.6)", "rgba(119,198,240,0.6)") ],
                    borderColor: "#1b97d1"
                },
                bar2: {
                    labels: [ "Requests", "Errors" ],
                    dataAttr: [ "attribute", [ "requests", "errors" ] ],
                    colors: [ createGradient("rgba(84,130,140,0.6)", "rgba(152,182,189,0.6)"), createGradient("rgba(255,62,0,0.5)", "rgba(255,147,112,0.5)"), createGradient("rgba(84,130,140,0.3)", "rgba(152,182,189,0.3)"), createGradient("rgba(255,62,0,0.2)", "rgba(255,147,112,0.2)") ],
                    borderColor: "#54828c"
                }
            };
            $scope.perfCharts = {
                totals: "",
                summary: {
                    currentCompare: "NOW"
                }
            };
            getAppConfig().then(getChartCriteria).then(function(chartCriteriaList) {
                if (!chartCriteriaList || !chartCriteriaList.length) {
                    return;
                }
                determineChartCriteria(chartCriteriaList);
                var defaultChartCriteria = [];
                if ($scope.chartCriteriaOptions.length > 0) {
                    defaultChartCriteria = $scope.chartCriteriaOptions[0].chartCriteriaId;
                }
                $scope.$watch("routeParams", function(newFilter) {
                    if (!newFilter[chartFilterContext]) {
                        newFilter[chartFilterContext] = defaultChartCriteria;
                    }
                    $rootScope.selectedChartCriteria = validateFilter(parseInt(newFilter[chartFilterContext]), $scope.chartCriteriaOptions, "chartCriteriaId");
                    angular.forEach(newFilter, function(v, k) {
                        $location.search(k, v);
                    });
                    $scope.perfCharts.summary.currentCompare = $rootScope.currentCompare = $location.search().currentCompare;
                    var mainChart = $rootScope.selectedChartCriteria.chartName !== "Overview" ? {
                        type: "bar",
                        call: "convertParetoChart",
                        template: "pareto",
                        dataDescriptions: [ "bar1", "bar2" ]
                    } : {
                        type: "timeseries",
                        call: "convertLineChart",
                        template: "line",
                        dataDescriptions: [ "timeseries1", "timeseries2" ]
                    }, compareExisting = $scope.perfCharts.summary.currentCompare !== "NOW" && $rootScope.currentCompare !== "NOW";
                    $scope.requestChartData(chartData, newFilter[chartFilterContext], {
                        period: newFilter.timeFilter,
                        reference: "NOW",
                        chartType: mainChart.type
                    }, function(mydata) {
                        $scope.perfCharts.requestTimes = angular.copy($rootScope.chartTemplate[mainChart.template]);
                        $scope.perfCharts.requests = angular.copy($rootScope.chartTemplate[mainChart.template]);
                        if (compareExisting) {
                            $scope.perfCharts.requestTimes = angular.copy($scope.perfCharts.requestTimes);
                            $scope.perfCharts.requests = angular.copy($scope.perfCharts.requests);
                            $scope.requestChartData(chartData, newFilter[chartFilterContext], {
                                period: newFilter.timeFilter,
                                reference: $rootScope.currentCompare,
                                chartType: mainChart.type
                            }, function(mycomparedata) {
                                convertData($rootScope.currentCompare, mycomparedata);
                            });
                        }
                        convertData("NOW", mydata);
                        function convertData(forceCompare, srcdata) {
                            if (mainChart.type === "bar") {
                                $scope.perfCharts.requestTimes = charts[mainChart.call](srcdata.responseTimes, $scope.perfCharts.requestTimes, dataDescription[mainChart.dataDescriptions[0]], $rootScope.selectedtimefilter.settings, forceCompare);
                                $scope.perfCharts.requests = charts[mainChart.call](srcdata.requestErrorCounts, $scope.perfCharts.requests, dataDescription[mainChart.dataDescriptions[1]], $rootScope.selectedtimefilter.settings, forceCompare);
                            } else {
                                $scope.perfCharts.requestTimes = charts[mainChart.call](srcdata.chartData, $scope.perfCharts.requestTimes, dataDescription[mainChart.dataDescriptions[0]], $rootScope.selectedtimefilter.settings, forceCompare);
                                $scope.perfCharts.requests = charts[mainChart.call](srcdata.chartData, $scope.perfCharts.requests, dataDescription[mainChart.dataDescriptions[1]], $rootScope.selectedtimefilter.settings, forceCompare);
                            }
                        }
                        if (compareExisting) {
                            data.jsonp(chartData, newFilter[chartFilterContext], {
                                period: newFilter.timeFilter,
                                reference: $rootScope.currentCompare,
                                chartType: mainChart.type
                            }, function(compareData) {
                                $scope.perfCharts.summary = compareSummaryData(mydata.summaryData, compareData.summaryData, $rootScope.currentCompare);
                            });
                        } else {
                            $scope.perfCharts.summary = compareSummaryData($scope.perfCharts.summary, mydata.summaryData, "NOW");
                        }
                    }, true);
                    $scope.itemsPerPage = 100;
                    $scope.loadMoreLogs = function(itemsPerPage) {
                        if (itemsPerPage) {
                            $scope.itemsPerPage = itemsPerPage;
                        }
                        if ($scope.autoUpdate) {
                            $scope.toggleAutoUpdate();
                        }
                        data.jsonp(rawData, newFilter[chartFilterContext], {
                            period: newFilter.timeFilter,
                            reference: $rootScope.currentCompare,
                            rowCount: $scope.itemsPerPage,
                            url: $rootScope.rawLogSearch.url,
                            networkCarrier: $rootScope.rawLogSearch.networkCarrier,
                            networkType: $rootScope.rawLogSearch.networkType,
                            deviceModel: $rootScope.rawLogSearch.deviceModel,
                            deviceId: $rootScope.rawLogSearch.deviceId,
                            devicePlatform: $rootScope.rawLogSearch.devicePlatform,
                            deviceOperatingSystem: $rootScope.rawLogSearch.deviceOperatingSystem,
                            latency: $rootScope.rawLogSearch.latency,
                            httpStatusCode: $rootScope.rawLogSearch.httpStatusCode,
                            start: $rootScope.rawLogSearch.start
                        }, function(logData) {
                            $scope.rawLogs = logData;
                        });
                    };
                    $scope.requestLogData(rawData, newFilter[chartFilterContext], {
                        period: newFilter.timeFilter,
                        reference: $rootScope.currentCompare,
                        rowCount: 1
                    }, function(logData) {
                        $scope.rawLogs = logData;
                    });
                    $scope.requestLogData(rawData, newFilter[chartFilterContext], {
                        period: newFilter.timeFilter,
                        reference: $rootScope.currentCompare,
                        rowCount: $scope.itemsPerPage
                    }, function(logData) {
                        $scope.rawLogs = logData;
                    });
                }, true);
            }, function(fail) {});
        };
        $scope.errorsCrashesSetup = function(ecDetail) {
            $rootScope.currentCompare = $routeParams.currentCompare = "NOW";
            $scope.ecHideChartFilters = true;
            var pieChartsCreated = false;
            $scope.ecDetailedViewList = [ {
                label: "Overview",
                value: 1
            }, {
                label: "App Errors",
                value: 2
            }, {
                label: "Crashes",
                value: 3
            } ];
            if (!$rootScope.ecDetailedView) {
                $rootScope.ecDetailedView = $scope.ecDetailedViewList[0];
            }
            chartCriteria = "logChartCriteria";
            chartData = "logChartData";
            rawData = "logRawData";
            chartErrorMsg = "Error getting chart data";
            chartFilterContext = "logChartFilter";
            var pieRGB = "255,3,3";
            dataDescription = {
                timeseries: {
                    labels: [ "App Errors", "Crashes" ],
                    yAxisLabels: [ "" ],
                    dataAttr: [ "errorAndAboveCount", "crashCount" ],
                    colors: [ "#ff4300", "#800000" ],
                    detailDataAttr: [],
                    detailYaxisLabel: [ "" ],
                    multiAxis: false,
                    areaColors: [ createGradient("#ff8f6b", "#fff"), createGradient("rgba(253,60,60,0.5)", "rgba(255,3,3,0.5)") ]
                },
                bar1: {
                    labels: [ "Crashes" ],
                    dataAttr: [ "attribute", "value" ],
                    colors: [ createGradient("rgba(128,0,0,0.5)", "rgba(255,3,3,0.5)") ],
                    borderColor: "#fff"
                },
                bar2: {
                    labels: [ "Crashes" ],
                    dataAttr: [ "attribute", "value" ],
                    colors: [ createGradient("rgba(128,0,0,0.5)", "rgba(255,3,3,0.5)") ],
                    borderColor: "#fff"
                },
                pie: {
                    dataAttr: [ "attribute", "percentage" ],
                    colors: [ "rgba(255,3,3,0.5)", "rgba(255,3,3,0.4)", "rgba(255,3,3,0.3)", "rgba(255,3,3,0.2)", "rgba(255,3,3,0.1)", "#ff9191", "#ffa1a1", "#ffb6b6", "#ffcbcb" ],
                    borderColor: "#ff0303"
                },
                area: {}
            };
            $scope.ecCharts = {
                totals: "",
                devicePlatform: {},
                appVersion: {},
                summary: {
                    currentCompare: "NOW"
                }
            };
            getAppConfig().then(getChartCriteria).then(function(chartCriteriaList) {
                if (!chartCriteriaList || !chartCriteriaList.length) {
                    return;
                }
                determineChartCriteria(chartCriteriaList);
                var defaultChartCriteria = [];
                if ($scope.chartCriteriaOptions.length > 0) {
                    defaultChartCriteria = $scope.chartCriteriaOptions[0].chartCriteriaId;
                }
                if ($rootScope.ecDetailedView.value === 1) {
                    $routeParams.logChartFilter = defaultChartCriteria;
                }
                $scope.changeEcDetailedView = function(detailedView) {
                    $rootScope.ecDetailedView = detailedView;
                    $rootScope.compare("NOW", false);
                    if (detailedView.value === 1 && $routeParams.logChartFilter != defaultChartCriteria) {
                        $routeParams.logChartFilter = defaultChartCriteria;
                    } else {
                        $routeParams.ts = new Date().getTime();
                    }
                };
                $scope.$watch("routeParams", function(newFilter, oldFilter) {
                    initChartFilters(newFilter, chartFilterContext);
                    if (newFilter) {
                        $scope.selectedFilter = newFilter;
                    }
                    manageCharts($scope.selectedFilter);
                }, true);
                function manageCharts(newFilter) {
                    var excludeCrash = false;
                    $rootScope.currentCompare = $location.search().currentCompare;
                    if ($scope.ecDetailedView.value === 1) {
                        $scope.ecDetailChartFilters = false;
                        rawData = "logRawData";
                        chartData = "logChartData";
                        dataDescription.timeseries.colors = [ "rgba(73,73,73,0.9)", "rgba(255,3,3,0.5)" ];
                        dataDescription.timeseries.labels = [ "App Errors", "Crashes" ];
                        dataDescription.timeseries.dataAttr = [ "errorAndAboveCount", "crashCount" ];
                        dataDescription.timeseries.areaColors = [ createGradient("rgba(73,73,73,0.5)", "rgba(255,255,255,0.5)"), createGradient("rgba(255,3,3,0.5)", "rgba(255,3,3,0.2)") ];
                        dataDescription.bar1.labels = [ "Crashes" ];
                        dataDescription.bar1.colors = [ createGradient("rgba(255,3,3,0.5)", "rgba(255,3,3,0.2)") ];
                        dataDescription.bar1.borderColor = "rgba(255,3,3,0.5)";
                        dataDescription.bar2.labels = [ "Crashes" ];
                        dataDescription.bar2.colors = [ createGradient("rgba(255,3,3,0.5)", "rgba(255,3,3,0.2)") ];
                        dataDescription.bar2.borderColor = "rgba(255,3,3,0.5)";
                    } else if ($scope.ecDetailedView.value === 2) {
                        $scope.ecDetailChartFilters = true;
                        excludeCrash = true;
                        rawData = "logRawData";
                        chartData = "logChartData";
                        dataDescription.timeseries.colors = [ "#efac25", "#494949", "#ff4300" ];
                        dataDescription.timeseries.labels = [ "Warning", "Errors", "Critical" ];
                        dataDescription.timeseries.dataAttr = [ "warnCount", "errorAndAboveCount", "assertCount" ];
                        dataDescription.timeseries.detailDataAttr = [ "errorAndAboveCount" ];
                        dataDescription.timeseries.detailYaxisLabel = [ "Errors" ];
                        dataDescription.timeseries.areaColors = [ createGradient("rgba(239,172,37,0.5)", "rgba(255,255,255,0.5)"), createGradient("rgba(73,73,73,0.5)", "rgba(255,255,255,0.5)"), createGradient("rgba(255,67,0,0.5)", "rgba(255,255,255,0.5)") ];
                        dataDescription.bar1.labels = [ "Errors" ];
                        dataDescription.bar1.colors = [ "rgba(73,73,73,0.5)", "rgba(255,255,255,0.5)" ];
                        dataDescription.bar1.borderColor = "#494949";
                    } else if ($scope.ecDetailedView.value === 3) {
                        $scope.ecDetailChartFilters = true;
                        chartData = "crashChartData";
                        rawData = "crashRawData";
                        dataDescription.timeseries.labels = [ "Crashes" ];
                        dataDescription.timeseries.dataAttr = [ "crashCount" ];
                        dataDescription.timeseries.colors = [ "#ff0303" ];
                        dataDescription.timeseries.areaColors = [ createGradient("rgba(253,60,60,0.5)", "rgba(255,3,3,0.5)") ];
                        dataDescription.timeseries.detailDataAttr = [ "crashCount" ];
                        dataDescription.timeseries.detailYaxisLabel = [ "Crashes" ];
                        dataDescription.bar1.labels = [ "Crashes" ];
                        dataDescription.bar1.colors = [ createGradient("rgba(255,3,3,0.5)", "rgba(255,3,3,0.2)") ];
                        dataDescription.bar1.borderColor = "rgba(255,3,3,0.5)";
                    }
                    if (!newFilter[chartFilterContext]) {
                        newFilter[chartFilterContext] = $location.search().logChartFilter;
                    }
                    $rootScope.selectedChartCriteria = validateFilter(parseInt(newFilter[chartFilterContext]), $scope.chartCriteriaOptions, "chartCriteriaId");
                    angular.forEach(newFilter, function(v, k) {
                        $location.search(k, v);
                    });
                    var compareExisting = $rootScope.currentCompare !== "NOW";
                    var mainChart;
                    if ($rootScope.selectedChartCriteria.chartName !== "Overview") {
                        mainChart = {
                            type: "bar",
                            call: "convertParetoChart",
                            template: "pareto",
                            dataDescriptionKey: "bar1"
                        };
                    } else {
                        mainChart = {
                            type: "timeseries",
                            call: $scope.conversionMethod || "convertAreaChart",
                            template: "area",
                            dataDescriptionKey: "timeseries"
                        };
                    }
                    $scope.requestChartData(chartData, newFilter[chartFilterContext], {
                        period: newFilter.timeFilter,
                        reference: "NOW",
                        chartType: mainChart.type
                    }, function(mydata) {
                        $scope.ecCharts.totals = angular.copy($rootScope.chartTemplate[mainChart.template]);
                        if (compareExisting) {
                            $scope.ecCharts.totals = angular.copy($scope.ecCharts.totals);
                            $scope.requestChartData(chartData, newFilter[chartFilterContext], {
                                period: newFilter.timeFilter,
                                reference: $rootScope.currentCompare,
                                chartType: mainChart.type
                            }, function(mycomparedata) {
                                $scope.ecCharts.totals = charts[mainChart.call](mycomparedata.chartData, $scope.ecCharts.totals, dataDescription[mainChart.dataDescriptionKey], $rootScope.selectedtimefilter.settings, $rootScope.currentCompare);
                            });
                        }
                        $scope.ecCharts.totals = charts[mainChart.call](mydata.chartData, $scope.ecCharts.totals, dataDescription[mainChart.dataDescriptionKey], $rootScope.selectedtimefilter.settings, "NOW");
                        var tempString, logDate;
                        if (mainChart.type === "timeseries") {
                            if ($scope.ecDetailedView.value === 1) {
                                createClickablePoint($scope.ecCharts.totals.series[0], rawData, "logMessage");
                                createClickablePoint($scope.ecCharts.totals.series[1], "crashRawData", "crashSummary");
                            } else if ($scope.ecDetailedView.value === 2) {
                                createClickablePoint($scope.ecCharts.totals.series[0], rawData, "logMessage", "C");
                                createClickablePoint($scope.ecCharts.totals.series[1], rawData, "logMessage", "E");
                                createClickablePoint($scope.ecCharts.totals.series[2], rawData, "logMessage", "W");
                            } else if ($scope.ecDetailedView.value === 3) {
                                createClickablePoint($scope.ecCharts.totals.series[0], rawData, "crashSummary");
                            }
                        }
                        function createClickablePoint(series, rawData, messageAttr, logLevel) {
                            series.point = {
                                events: {
                                    click: function(event) {
                                        var d = new Date(this.category);
                                        d.setSeconds(0);
                                        d.setMilliseconds(0);
                                        d = d.getTime();
                                        var index = 0;
                                        tempString = "";
                                        var chart = this;
                                        $scope.$apply(function() {
                                            data.jsonp(rawData, newFilter[chartFilterContext], {
                                                period: newFilter.timeFilter,
                                                reference: $rootScope.currentCompare,
                                                rowCount: "20",
                                                excludeCrash: true,
                                                callback: "JSON_CALLBACK",
                                                logLevel: logLevel,
                                                fixedTime: d
                                            }, function(mydata2) {
                                                if (mydata2.length > 0) {
                                                    for (var i = 0; i < mydata2.length; i++) {
                                                        logDate = new Date(mydata2[i].timeStamp);
                                                        var icon;
                                                        if (mydata2[i].devicePlatform === "Android") {
                                                            icon = '<i class="sdk-icon-android"></i>';
                                                        } else if (mydata2[i].devicePlatform === "iPhone OS" || mydata2[i].devicePlatform === "iPad OS") {
                                                            icon = '<i class="sdk-icon-ios"></i>';
                                                        }
                                                        tempString += '<div class="content-row">' + icon + "<b>" + logDate.getHours() + ":" + (logDate.getMinutes() < 10 ? "0" : "") + logDate.getMinutes() + ":" + (logDate.getSeconds() < 10 ? "0" : "") + logDate.getSeconds() + '</b><br/><div class="log-message">' + mydata2[i][messageAttr] + "</div></div>";
                                                    }
                                                    var popup = angular.element(document.getElementById("pointPopupTemp")), newPopup, holder = angular.element(document.getElementById("popupHolder"));
                                                    var clonedElement = $compile(popup.html())($scope, function(clonedElement, $scope) {
                                                        holder.append(clonedElement);
                                                        newPopup = clonedElement;
                                                    });
                                                    newPopup.find("h3 span").html("Top " + chart.series.name + " at " + logDate.getHours() + ":" + (logDate.getMinutes() < 10 ? "0" : "") + logDate.getMinutes());
                                                    newPopup.find(".content").html(tempString);
                                                    newPopup.removeClass("hide");
                                                    newPopup.css({
                                                        top: event.clientY,
                                                        left: event.clientX
                                                    });
                                                }
                                            });
                                        });
                                    }
                                }
                            };
                        }
                        $scope.scrollTo = function(id) {
                            $location.hash(id);
                            $anchorScroll();
                        };
                        $scope.hidePopup = function(e) {
                            angular.element(e.currentTarget).parent().addClass("hide");
                        };
                        $scope.popup = function() {
                            return {
                                move: function(divid, xpos, ypos) {
                                    var a = document.getElementById(divid);
                                    divid.style.left = xpos + "px";
                                    divid.style.top = ypos + "px";
                                },
                                startMoving: function(evt) {
                                    evt = evt || window.event;
                                    var posX = evt.clientX, posY = evt.clientY, a = evt.currentTarget, divTop = a.style.top, divLeft = a.style.left;
                                    divTop = divTop.replace("px", "");
                                    divLeft = divLeft.replace("px", "");
                                    var diffX = posX - divLeft, diffY = posY - divTop;
                                    document.onmousemove = function(evt) {
                                        evt = evt || window.event;
                                        var posX = evt.clientX, posY = evt.clientY, aX = posX - diffX, aY = posY - diffY;
                                        $scope.popup.move(a, aX, aY);
                                    };
                                },
                                stopMoving: function(ele) {
                                    var a = document.createElement("script");
                                    document.onmousemove = function() {};
                                }
                            };
                        }();
                        if (compareExisting) {
                            data.jsonp(chartData, newFilter[chartFilterContext], {
                                period: newFilter.timeFilter,
                                reference: $rootScope.currentCompare
                            }, function(compareData) {
                                $scope.ecCharts.summary = compareSummaryData(mydata.summaryData, compareData.summaryData, $rootScope.currentCompare);
                            });
                        } else {
                            $scope.ecCharts.summary = compareSummaryData($scope.ecCharts.summary, mydata.summaryData, "NOW");
                        }
                    }, true);
                    $scope.itemsPerPage = 100;
                    $scope.requestLogData(rawData, newFilter[chartFilterContext], {
                        period: newFilter.timeFilter,
                        reference: $rootScope.currentCompare,
                        excludeCrash: excludeCrash,
                        rowCount: 1
                    }, function(logData) {
                        $scope.rawLogs = {
                            rawDataType: rawData,
                            rawData: logData
                        };
                    });
                    $scope.requestLogData(rawData, newFilter[chartFilterContext], {
                        period: newFilter.timeFilter,
                        reference: $rootScope.currentCompare,
                        excludeCrash: excludeCrash,
                        rowCount: $scope.itemsPerPage
                    }, function(logData) {
                        $scope.rawLogs = {
                            rawDataType: rawData,
                            rawData: logData
                        };
                    });
                    $scope.loadMoreLogs = function(itemsPerPage) {
                        if (itemsPerPage) {
                            $scope.itemsPerPage = itemsPerPage;
                        }
                        if ($scope.autoUpdate) {
                            $scope.toggleAutoUpdate();
                        }
                        data.jsonp(rawData, newFilter[chartFilterContext], {
                            period: newFilter.timeFilter,
                            reference: $rootScope.currentCompare,
                            rowCount: $scope.itemsPerPage,
                            excludeCrash: excludeCrash,
                            logMessage: $rootScope.rawLogSearch.logMessage,
                            tag: $rootScope.rawLogSearch.tag,
                            severity: $rootScope.rawLogSearch.severity,
                            devicePlatform: $rootScope.rawLogSearch.devicePlatform,
                            deviceOperatingSystem: $rootScope.rawLogSearch.deviceOperatingSystem,
                            deviceModel: $rootScope.rawLogSearch.deviceModel,
                            deviceId: $rootScope.rawLogSearch.deviceId,
                            start: $rootScope.rawLogSearch.start
                        }, function(logData) {
                            $scope.rawLogs = {
                                rawDataType: rawData,
                                rawData: logData
                            };
                        });
                    };
                    if ($rootScope.selectedChartCriteria.chartName === "Overview" && $scope.ecDetailedView.value === 1) {
                        $scope.ecCharts.deviceModels = angular.copy($scope.ecCharts.deviceModels || $rootScope.chartTemplate.pareto);
                        $scope.ecCharts.platformVersions = angular.copy($scope.ecCharts.platformVersions || $rootScope.chartTemplate.pareto);
                        chartDataCall("crashChartData", deviceModelFilter, "bar", $scope.ecCharts.deviceModels, "convertParetoChart", "bar1", function(chartData) {
                            $scope.ecCharts.deviceModels = chartData;
                        });
                        chartDataCall("crashChartData", osVersionFilter, "bar", $scope.ecCharts.platformVersions, "convertParetoChart", "bar2", function(chartData) {
                            $scope.ecCharts.platformVersions = chartData;
                        });
                        if (newFilter.currentCompare === "NOW") {
                            $scope.ecCharts.devicePlatform.chart = angular.copy($scope.ecCharts.devicePlatform.chart || $rootScope.chartTemplate.pie);
                            $scope.ecCharts.appVersion.chart = angular.copy($scope.ecCharts.appVersion.chart || $rootScope.chartTemplate.pie);
                            chartDataCall(chartData, platformFilter, "pie", $scope.ecCharts.devicePlatform.chart, "convertPieChart", "pie", function(chartData1, rawData) {
                                $scope.ecCharts.devicePlatform.chart = chartData1;
                                $scope.ecCharts.devicePlatform.data = rawData;
                            });
                            chartDataCall(chartData, appVersionFilter, "pie", $scope.ecCharts.appVersion.chart, "convertPieChart", "pie", function(chartData2, rawData) {
                                $scope.ecCharts.appVersion.chart = chartData2;
                                $scope.ecCharts.appVersion.data = rawData;
                            });
                        }
                    }
                }
            });
        };
        $scope.appUsageSetup = function() {
            $rootScope.currentCompare = $routeParams.currentCompare = "NOW";
            chartCriteria = "sessionChartCriteria";
            chartData = "sessionChartData";
            chartErrorMsg = "Error getting chart data";
            chartFilterContext = "sessionChartFilter";
            var pieRGB = "27,112,160";
            dataDescription = {
                timeseries: {
                    labels: [ "Sessions" ],
                    yAxisLabels: [ "" ],
                    dataAttr: [ "numSessions" ],
                    colors: [ "#3ac62f", "#898989", "#ececec", "#ff33ee" ],
                    detailDataAttr: [ "numSessions" ],
                    detailYaxisLabel: [ "Sessions" ],
                    multiAxis: true
                },
                bar: {
                    labels: [ "Sessions" ],
                    dataAttr: [ "attribute", "value" ],
                    colors: [ createGradient("rgba(69,196,0,0.6)", "rgba(167,233,132,0.6)") ],
                    borderColor: "#3ac62f"
                },
                bar1: {
                    labels: [ "Sessions" ],
                    dataAttr: [ "attribute", "value" ],
                    colors: [ createGradient("rgba(69,196,0,0.6)", "rgba(167,233,132,0.6)") ],
                    borderColor: "#3ac62f"
                },
                pie: {
                    dataAttr: [ "attribute", "percentage" ],
                    colors: [ createGradient("rgba(" + pieRGB + ",0.9)", "rgba(" + pieRGB + ",0.8)"), createGradient("rgba(" + pieRGB + ",0.8)", "rgba(" + pieRGB + ",0.6)"), createGradient("rgba(" + pieRGB + ",0.6)", "rgba(" + pieRGB + ",0.4)"), createGradient("rgba(" + pieRGB + ",0.4)", "rgba(" + pieRGB + ",0.2)"), createGradient("rgba(" + pieRGB + ",0.2)", "rgba(" + pieRGB + ",0.1)") ],
                    borderColor: "#3ac62f"
                }
            };
            $scope.appUsageCharts = {
                totals: "",
                sessionsByModel: "",
                devicePlatform: {},
                appVersion: {},
                summary: {
                    currentCompare: "NOW"
                }
            };
            getAppConfig().then(getChartCriteria).then(function(chartCriteriaList) {
                if (!chartCriteriaList || !chartCriteriaList.length) {
                    return;
                }
                determineChartCriteria(chartCriteriaList);
                var defaultChartCriteria = [];
                if ($scope.chartCriteriaOptions.length > 0) {
                    defaultChartCriteria = $scope.chartCriteriaOptions[0].chartCriteriaId;
                }
                $scope.$watch("routeParams", function(newFilter) {
                    initChartFilters(newFilter, chartFilterContext);
                    if (!newFilter[chartFilterContext]) {
                        newFilter[chartFilterContext] = defaultChartCriteria;
                    }
                    $rootScope.selectedChartCriteria = validateFilter(parseInt(newFilter[chartFilterContext]), $scope.chartCriteriaOptions, "chartCriteriaId");
                    angular.forEach(newFilter, function(v, k) {
                        $location.search(k, v);
                    });
                    $scope.appUsageCharts.summary.currentCompare = $rootScope.currentCompare = $location.search().currentCompare;
                    var mainChart = $rootScope.selectedChartCriteria.chartName !== "Overview" ? {
                        type: "bar",
                        call: "convertParetoChart",
                        template: "pareto",
                        dataDescriptions: [ "bar1" ]
                    } : {
                        type: "TIMESERIES",
                        call: "convertLineChart",
                        template: "line",
                        dataDescriptions: [ "timeseries" ]
                    }, compareExisting = $scope.appUsageCharts.summary.currentCompare !== "NOW" && $rootScope.currentCompare !== "NOW";
                    $scope.requestChartData(chartData, newFilter[chartFilterContext], {
                        period: newFilter.timeFilter,
                        reference: "NOW",
                        chartType: mainChart.type
                    }, function(mydata) {
                        $scope.appUsageCharts.totals = angular.copy($rootScope.chartTemplate[mainChart.template]);
                        $scope.appUsageCharts.totals = charts[mainChart.call](mydata.chartData, $scope.appUsageCharts.totals, dataDescription[mainChart.dataDescriptions[0]], $rootScope.selectedtimefilter.settings, "NOW");
                        if (compareExisting) {
                            $scope.appUsageCharts.totals = angular.copy($scope.appUsageCharts.totals);
                            $scope.requestChartData(chartData, newFilter[chartFilterContext], {
                                period: newFilter.timeFilter,
                                reference: $rootScope.currentCompare,
                                chartType: mainChart.type
                            }, function(mycomparedata) {
                                $scope.appUsageCharts.totals = charts[mainChart.call](mycomparedata.chartData, $scope.appUsageCharts.totals, dataDescription[mainChart.dataDescriptions[0]], $rootScope.selectedtimefilter.settings, $rootScope.currentCompare);
                            });
                        }
                        if (compareExisting) {
                            data.jsonp(chartData, newFilter[chartFilterContext], {
                                period: newFilter.timeFilter,
                                reference: $rootScope.currentCompare
                            }, function(compareData) {
                                $scope.appUsageCharts.summary = compareSummaryData(mydata.summaryData, compareData.summaryData, $rootScope.currentCompare);
                            });
                        } else {
                            $scope.appUsageCharts.summary = compareSummaryData($scope.appUsageCharts.summary, mydata.summaryData, "NOW");
                        }
                    }, true);
                    $scope.appUsageCharts.sessionsByModel = angular.copy($scope.appUsageCharts.sessionsByModel || $rootScope.chartTemplate.pareto);
                    $scope.appUsageCharts.sessionsByPlatform = angular.copy($scope.appUsageCharts.sessionsByPlatform || $rootScope.chartTemplate.pareto);
                    chartDataCall(chartData, deviceModelFilter, "bar", $scope.appUsageCharts.sessionsByModel, "convertParetoChart", "bar", function(chartData) {
                        $scope.appUsageCharts.sessionsByModel = chartData;
                    });
                    chartDataCall(chartData, osVersionFilter, "bar", $scope.appUsageCharts.sessionsByPlatform, "convertParetoChart", "bar", function(chartData) {
                        $scope.appUsageCharts.sessionsByPlatform = chartData;
                    });
                    if (newFilter.currentCompare === "NOW") {
                        $scope.appUsageCharts.devicePlatform.chart = angular.copy($scope.appUsageCharts.devicePlatform.chart || $rootScope.chartTemplate.pie);
                        $scope.appUsageCharts.appVersion.chart = angular.copy($scope.appUsageCharts.appVersion.chart || $rootScope.chartTemplate.pie);
                        chartDataCall(chartData, platformFilter, "pie", $scope.appUsageCharts.devicePlatform.chart, "convertPieChart", "pie", function(chartData1, rawData) {
                            $scope.appUsageCharts.devicePlatform.chart = chartData1;
                            $scope.appUsageCharts.devicePlatform.data = rawData;
                        });
                        chartDataCall(chartData, appVersionFilter, "pie", $scope.appUsageCharts.appVersion.chart, "convertPieChart", "pie", function(chartData2, rawData) {
                            $scope.appUsageCharts.appVersion.chart = chartData2;
                            $scope.appUsageCharts.appVersion.data = rawData;
                        });
                    }
                }, true);
            }, function(fail) {});
        };
        function chartDataCall(chartData, newFilter, chartType, chartTemplate, convertMethod, dataDescriptionKey, successCallback) {
            data.jsonp(chartData, newFilter[chartFilterContext], {
                period: newFilter.timeFilter,
                reference: newFilter.currentCompare,
                chartType: chartType
            }, function(mychartdata) {
                successCallback(charts[convertMethod](mychartdata.chartData, chartTemplate, dataDescription[dataDescriptionKey], $rootScope.selectedtimefilter.settings, newFilter.currentCompare), mychartdata);
            });
        }
        $scope.needHelpDialog = function(modalId) {
            data.jsonp_raw("apigeeuihelpemail", "", {
                useremail: $rootScope.userEmail
            }).then(function(data) {
                $rootScope.$broadcast("alert", "success", "Email sent. Our team will be in touch with you shortly.");
                $rootScope.performance.showHelpButton = false;
            }, function(rejectedData) {
                $rootScope.$broadcast("alert", "error", "Problem Sending Email. Try sending an email to mobile@apigee.com.");
            });
            $scope.hideModal(modalId);
        };
    } ]);
    function createGradient(color1, color2) {
        var perShapeGradient = {
            x1: 0,
            y1: 0,
            x2: 0,
            y2: 1
        };
        return {
            linearGradient: perShapeGradient,
            stops: [ [ 0, color1 ], [ 1, color2 ] ]
        };
    }
    function compareSummaryData(oldData, newData, currentCompare) {
        for (var key in newData) {
            var newVal, labelVal, color, label, oldVal, percent;
            try {
                oldVal = oldData[key].hasOwnProperty("value") ? oldData[key].value : oldData[key];
            } catch (e) {}
            newVal = newData[key].hasOwnProperty("value") ? newData[key].value : newData[key];
            if (newData.hasOwnProperty(key)) {
                if (currentCompare === "NOW") {
                    color = "black";
                    label = newVal;
                } else {
                    if (newVal === 0) {
                        percent = 0;
                    } else {
                        percent = Math.round(oldVal / newVal * 100) - 100;
                    }
                    if (percent < 0) {
                        color = "red";
                        label = percent + "%";
                    } else if (percent > 0) {
                        color = "green";
                        label = "+" + percent + "%";
                    } else {
                        color = "black";
                        label = 0;
                    }
                }
            }
            newData[key] = {
                color: color,
                value: newVal,
                oldValue: oldVal,
                label: label
            };
        }
        newData.currentCompare = currentCompare;
        return newData;
    }
    "use strict";
    AppServices.MAX = AppServices.MAX || angular.module("appservices.max", []);
    AppServices.MAX.directive("infobox", function() {
        return {
            restrict: "ECA",
            scope: {
                datasrc: "=datasrc",
                currentcompare: "=currentcompare"
            },
            transclude: true,
            templateUrl: "performance/includes/info-box.html",
            replace: true,
            link: function linkFn(scope, lElement, attrs) {
                scope.title = attrs.title;
            }
        };
    });
    "use strict";
    AppServices.MAX = AppServices.MAX || angular.module("appservices.max", []);
    AppServices.MAX.controller("RawLogCtrl", [ "data", "$scope", "$rootScope", function(data, $scope, $rootScope) {
        $scope.rawLogSearchShowAdv = false;
        $scope.showStackTrace = function(id) {
            alert(id);
        };
        $scope.nextPage = function() {
            $rootScope.rawLogSearch.pageNumber++;
            $rootScope.rawLogSearch.start = $scope.itemsPerPage * $rootScope.rawLogSearch.pageNumber;
            $scope.loadMoreLogs();
        };
        $scope.prevPage = function() {
            if ($rootScope.rawLogSearch.pageNumber > 0) {
                $rootScope.rawLogSearch.pageNumber--;
            }
            $rootScope.rawLogSearch.start = $scope.itemsPerPage * $rootScope.rawLogSearch.pageNumber;
            $scope.loadMoreLogs();
        };
        $rootScope.rawLogSearch = {
            tag: "",
            severity: "",
            devicePlatform: "",
            deviceOperatingSystem: "",
            deviceModel: "",
            deviceId: "",
            start: 0,
            pageNumber: 0
        };
    } ]);
    "use strict";
    AppServices.MAX = AppServices.MAX || angular.module("appservices.max", []);
    AppServices.MAX.filter("rawLogFilter", [ "data", function(data) {
        return function(items, searchObj, fullTextAttrs, greaterThanAttrs) {
            if (items) {
                var tempSearchArray = [];
                for (var key in searchObj) {
                    var obj = searchObj[key];
                    var tempObj = {};
                    if (obj) {
                        tempObj[key] = obj;
                        tempSearchArray.push(tempObj);
                    }
                }
                if (tempSearchArray.length < 1) {
                    return items;
                }
                return items.filter(function(element, index, array) {
                    var tempItems = [];
                    var compositeCheck = [];
                    for (var i = 0; i < tempSearchArray.length; i++) {
                        for (var elementKey in element) {
                            if (tempSearchArray[i][elementKey]) {
                                var searchString = tempSearchArray[i][elementKey], elementString = element[elementKey];
                                var attrsCheck = false;
                                if (greaterThanAttrs && greaterThanAttrs.length > 0) {
                                    compositeCheck.push(true);
                                    attrsCheck = true;
                                } else if (fullTextAttrs && fullTextAttrs.length > 0) {
                                    for (var j = 0; j < fullTextAttrs.length; j++) {
                                        if (elementKey == fullTextAttrs[j]) {
                                            compositeCheck.push((elementString + "").search(new RegExp(searchString, "i")) != -1);
                                            attrsCheck = true;
                                        }
                                    }
                                }
                                if (!attrsCheck) {
                                    compositeCheck.push((elementString + "").search(new RegExp(searchString, "i")) == 0);
                                }
                            }
                        }
                    }
                    function checkHistory() {
                        for (var i = 0; i < compositeCheck.length; i++) {
                            if (!compositeCheck[i]) {
                                return false;
                            }
                        }
                        return true;
                    }
                    return checkHistory();
                });
            }
        };
    } ]);
    "use strict";
    AppServices.MAX = AppServices.MAX || angular.module("appservices.max", []);
    AppServices.MAX.controller("PushConfigCtrl", [ "ug", "$scope", "$rootScope", "$routeParams", "$location", function(ug, $scope, $rootScope, $routeParams, $location) {
        $scope.notifier = {};
        $scope.notifier.appleNotifierCert = [];
        $scope.notifier.appleNotifierName = "";
        $scope.notifier.appleEnvironment = "";
        $scope.notifier.notifierCertPassword = "";
        $scope.notifier.androidNotifierName = "";
        $scope.notifier.androidNotifierAPIKey = "";
        $scope.notifiersCollection = {};
        ug.getNotifiers();
        $scope.$on("app-changed", function() {
            ug.getNotifiers();
        });
        $scope.deleteNotifiersDialog = function(modalId) {
            $scope.deleteEntities($scope.notifiersCollection, "notifier-deleted", "error deleting notifier");
            $scope.hideModal(modalId);
        };
        $scope.$on("notifier-deleted", function(event, collection) {
            $rootScope.$broadcast("alert", "success", "Notifier deleted successfully.");
        });
        $scope.$on("notifiers-received", function(event, collection) {
            $scope.notifiersCollection = collection;
            $scope.queryBoxesSelected = false;
            $scope.applyScope();
        });
        $rootScope.createAppleNotifier = function() {
            ug.createAppleNotifier($scope.appleNotifierCert, $scope.notifier.appleNotifierName, $scope.notifier.appleEnvironment, $scope.notifier.appleCertPassword);
            $scope.notifier = {};
        };
        $rootScope.createAndroidNotifier = function() {
            ug.createAndroidNotifier($scope.notifier.androidNotifierName, $scope.notifier.androidNotifierAPIKey);
            $scope.notifier = {};
        };
        $scope.$on("notifier-update", function(event) {
            ug.getNotifiers();
        });
    } ]);
    AppServices.Controllers.directive("file", function() {
        return {
            scope: {
                file: "="
            },
            link: function(scope, el, attrs) {
                el.bind("change", function(event) {
                    var files = event.target.files;
                    scope.$parent.$parent.$parent.$parent.appleNotifierCert = files[0];
                    scope.$parent.$parent.$parent.$parent.$apply();
                });
            }
        };
    });
    "use strict";
    AppServices.MAX = AppServices.MAX || angular.module("appservices.max", []);
    AppServices.MAX.controller("PushGetStartedCtrl", [ "ug", "$scope", "$rootScope", "$location", function(ug, $scope, $rootScope, $location) {} ]);
    "use strict";
    AppServices.MAX = AppServices.MAX || angular.module("appservices.max", []);
    AppServices.MAX.controller("PushHistoryCtrl", [ "ug", "$scope", "$rootScope", "$location", function(ug, $scope, $rootScope, $location) {
        $scope.notificationCollection = {};
        $scope.previous_display = "none";
        $scope.next_display = "none";
        $scope.historyList = [ {
            name: "All",
            value: ""
        }, {
            name: "Scheduled",
            value: "SCHEDULED"
        }, {
            name: "Sending",
            value: "STARTED"
        }, {
            name: "Sent",
            value: "FINISHED"
        }, {
            name: "Failed",
            value: "FAILED"
        }, {
            name: "Canceled",
            value: "CANCELED"
        } ];
        var stateImages = {
            FAILED: "img/red_dot.png",
            FINISHED: "img/green_dot.png",
            STARTED: "img/green_dot.png",
            CANCELED: "img/red_dot.png",
            SCHEDULED: "img/green_dot.png",
            FINISHED_ERRORS: "img/yellow_dot.png"
        };
        $scope.getStateImage = function(notification) {
            var data = notification._data;
            var image = stateImages[data.state] || stateImages.STARTED;
            image = data.statistics && data.statistics.errors > 0 && image !== "img/red_dot.png" ? "img/yellow_dot.png" : image;
            return image;
        };
        $scope.getStateMessage = function(notification) {
            var data = notification._data;
            var state = data.state === "FINISHED" && (data.statistics && data.statistics.errors > 0) ? "FINISHED (WITH ERRORS)" : data.state;
            return state;
        };
        $scope.selectedHistory = $scope.historyList[0];
        ug.getNotificationHistory();
        $scope.$watch("currentApp", function() {
            ug.getNotificationHistory();
        });
        $scope.$on("notifications-received", function(event, collection) {
            $scope.notificationCollection = collection;
            $scope.checkNextPrev();
            if (!$scope.$$phase) {
                $scope.$apply();
            }
        });
        $scope.showHistory = function(option) {
            $scope.selectedHistory = option;
            ug.getNotificationHistory(option.value);
        };
        $scope.viewReceipts = function(uuid) {
            $rootScope.selectedNotification = $scope.notificationCollection.getEntityByUUID(uuid);
            $location.path("/push/history/receipts");
        };
        $scope.resetNextPrev = function() {
            $scope.previous_display = "none";
            $scope.next_display = "none";
        };
        $scope.checkNextPrev = function() {
            $scope.resetNextPrev();
            if ($scope.notificationCollection.hasPreviousPage()) {
                $scope.previous_display = "block";
            }
            if ($scope.notificationCollection.hasNextPage()) {
                $scope.next_display = "block";
            }
        };
        $scope.getPrevious = function() {
            $scope.notificationCollection.getPreviousPage(function(err) {
                if (err) {
                    $rootScope.$broadcast("alert", "error", "error getting previous page");
                }
                $scope.checkNextPrev();
                if (!$scope.$$phase) {
                    $scope.$apply();
                }
            });
        };
        $scope.getNext = function() {
            $scope.notificationCollection.getNextPage(function(err) {
                if (err) {
                    $rootScope.$broadcast("alert", "error", "error getting next page");
                }
                $scope.checkNextPrev();
                if (!$scope.$$phase) {
                    $scope.$apply();
                }
            });
        };
        $scope.getNotificationStartedDate = function(notification) {
            return notification.started || notification.created;
        };
    } ]);
    "use strict";
    AppServices.MAX = AppServices.MAX || angular.module("appservices.max", []);
    AppServices.MAX.controller("PushReceiptsCtrl", [ "ug", "$scope", "$rootScope", "$location", function(ug, $scope, $rootScope, $location) {
        $scope.receiptsCollection = {};
        $scope.previous_display = "none";
        $scope.next_display = "none";
        $scope.statusList = [ {
            name: "All",
            value: ""
        }, {
            name: "Received",
            value: "RECEIVED"
        }, {
            name: "Failed",
            value: "FAILED"
        } ];
        $scope.selectedStatus = $scope.statusList[0];
        if (!$rootScope.selectedNotification) {
            $location.path("/push/history");
        }
        ug.getNotificationReceipts($rootScope.selectedNotification.get("uuid"));
        $scope.$on("receipts-received", function(event, collection) {
            $scope.receiptsCollection = collection;
            $scope.checkNextPrev();
            if (!$scope.$$phase) {
                $scope.$apply();
            }
        });
        $scope.showHistory = function(type) {
            ug.getNotificationReceipts($rootScope.selectedNotification.get("uuid"));
        };
        $scope.showReceipts = function(option) {
            $scope.selectedStatus = option;
            ug.getNotificationReceipts($rootScope.selectedNotification.get("uuid"), option.value);
        };
        $scope.resetNextPrev = function() {
            $scope.previous_display = "none";
            $scope.next_display = "none";
        };
        $scope.checkNextPrev = function() {
            $scope.resetNextPrev();
            if ($scope.receiptsCollection.hasPreviousPage()) {
                $scope.previous_display = "block";
            }
            if ($scope.receiptsCollection.hasNextPage()) {
                $scope.next_display = "block";
            }
        };
        $scope.getPrevious = function() {
            $scope.receiptsCollection.getPreviousPage(function(err) {
                if (err) {
                    $rootScope.$broadcast("alert", "error", "error getting previous page");
                }
                $scope.checkNextPrev();
                if (!$scope.$$phase) {
                    $scope.$apply();
                }
            });
        };
        $scope.getNext = function() {
            $scope.receiptsCollection.getNextPage(function(err) {
                if (err) {
                    $rootScope.$broadcast("alert", "error", "error getting next page");
                }
                $scope.checkNextPrev();
                if (!$scope.$$phase) {
                    $scope.$apply();
                }
            });
        };
    } ]);
    "use strict";
    AppServices.MAX.controller("PushSendNotificationCtrl", [ "ug", "$scope", "$rootScope", "$location", "data", function(ug, $scope, $rootScope, $location, data) {
        $scope.send = {};
        $scope.send.selectedNotifier = {};
        $scope.send.controlGroup = "all";
        $scope.send.deliveryPeriod = {};
        $scope.controlGroup = "all";
        $scope.notifiersCollection = {};
        ug.getNotifiers();
        $scope.$on("notifiers-received", function(event, collection) {
            $scope.notifiersCollection = collection._list;
            if (!$scope.$$phase) {
                $scope.$apply();
            }
        });
        $scope.selectDevices = function() {};
        $scope.scheduleNotification = function() {
            if ($scope.send.$valid) {
                var optionList = "";
                var type = $scope.send.controlGroup;
                var payload = {
                    payloads: {},
                    deliver: null
                };
                payload.payloads[$scope.send.selectedNotifier._data.name] = $scope.send.notifierMessage;
                if (type !== "all") {
                    optionList = $scope.send[type];
                    angular.forEach(optionList, function(value, index) {
                        var path = type + "/" + value + "/notifications";
                        ug.sendNotification(path, payload);
                    });
                } else {
                    ug.sendNotification("devices;ql=/notifications", payload);
                }
                $rootScope.$broadcast("alert", "success", "Notifications have been queued.");
            }
        };
        $("#notification-schedule-time-date").datepicker();
        $("#notification-schedule-time-date").datepicker("setDate", Date.last().sunday());
        $("#notification-schedule-time-time").val("12:00 AM");
        $("#notification-schedule-time-time").timepicker({
            showPeriod: true,
            showLeadingZero: false
        });
        function pad(number, length) {
            var str = "" + number;
            while (str.length < length) {
                str = "0" + str;
            }
            return str;
        }
        var offset = new Date().getTimezoneOffset();
        offset = (offset < 0 ? "+" : "-") + pad(parseInt(Math.abs(offset / 60)), 2) + pad(Math.abs(offset % 60), 2);
        $("#gmt_display").html("GMT " + offset);
    } ]);
    "use strict";
    AppServices.MAX = AppServices.MAX || angular.module("appservices.max", []);
    AppServices.MAX.controller("TestCtrl", [ "ug", "$scope", "$rootScope", "$routeParams", "$location", function(ug, $scope, $rootScope, $routeParams, $location) {
        $scope.login = function() {
            $rootScope.currentPath = "/login";
            var username = $scope.login_username;
            var password = $scope.login_password;
            alert(username);
        };
        $rootScope.$on("userNotAuthenticated", function(event) {
            $location.path("/login");
            if (!$rootScope.$$phase) {
                $rootScope.$apply();
            }
        });
        $scope.$on("loginSuccesful", function(event, user, organizations, applications) {
            $rootScope.userEmail = user.get("email");
            $rootScope.organizations = ug.client().getObject("organizations");
            $rootScope.applications = ug.client().getObject("applications");
            $rootScope.currentOrg = ug.client().get("orgName");
            $rootScope.currentApp = ug.client().get("appName");
            if ($rootScope.currentPath === "/login" || $rootScope.currentPath === "/login/loading") {
                $location.path("/org-overview");
            } else {
                $location.path($rootScope.currentPath);
            }
            if (!$scope.$$phase) {
                $scope.$apply();
            }
        });
        $scope.$on("reauthSuccesful", function(event) {
            $rootScope.organizations = ug.client().getObject("organizations");
            $rootScope.applications = ug.client().getObject("applications");
            $rootScope.currentOrg = ug.client().get("orgName");
            $rootScope.currentApp = ug.client().get("appName");
            if ($rootScope.currentPath === "/login") {
                $location.path("/org-overview");
            } else {
                $location.path($rootScope.currentPath);
            }
            if (!$scope.$$phase) {
                $scope.$apply();
            }
        });
    } ]);
    AppServices.MAX = AppServices.MAX || angular.module("appservices.max", []);
    AppServices.MAX.config([ "$routeProvider", function($routeProvider) {
        $routeProvider.when("/push/sendNotification", {
            templateUrl: "push/push-send-notification.html",
            controller: "PushSendNotificationCtrl"
        }).when("/push/getStarted", {
            templateUrl: "push/push-get-started.html",
            controller: "PushGetStartedCtrl"
        }).when("/push/history", {
            templateUrl: "push/push-history.html",
            controller: "PushHistoryCtrl"
        }).when("/push/history/receipts", {
            templateUrl: "push/push-receipts.html",
            controller: "PushReceiptsCtrl"
        }).when("/push/configuration", {
            templateUrl: "push/push-config.html",
            controller: "PushConfigCtrl"
        }).when("/performance/errors-crashes", {
            templateUrl: "performance/errors-crashes.html",
            controller: "PerformanceCtrl",
            reloadOnSearch: false
        }).when("/performance/api-perf", {
            templateUrl: "performance/api-perf.html",
            controller: "PerformanceCtrl",
            reloadOnSearch: false
        }).when("/performance/app-usage", {
            templateUrl: "performance/app-usage.html",
            controller: "PerformanceCtrl",
            reloadOnSearch: false
        }).when("/performance/custom-events", {
            templateUrl: "performance/custom-events.html",
            controller: "PerformanceCtrl",
            reloadOnSearch: false
        }).when("/configure", {
            templateUrl: "performance/default-config.html",
            controller: "ConfigureCtrl"
        }).when("/configure/default-configs", {
            templateUrl: "performance/default-config.html",
            controller: "ConfigureCtrl"
        }).when("/configure/beta-configs", {
            templateUrl: "performance/beta-config.html",
            controller: "ConfigureCtrl"
        }).when("/configure/ab-configs", {
            templateUrl: "performance/ab-config.html",
            controller: "ConfigureCtrl"
        }).when("/configure/event-configs", {
            templateUrl: "performance/event-config.html",
            controller: "ConfigureCtrl"
        });
    } ]);
})({}, function() {
    return this;
}());